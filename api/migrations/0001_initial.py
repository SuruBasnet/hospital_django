# Generated by Django 4.1.3 on 2022-11-14 10:43

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountLedger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('openingBalance', models.IntegerField(blank=True, null=True)),
                ('debit_credit', models.CharField(blank=True, choices=[('Dr.', 'Dr.'), ('Cr.', 'Cr.')], max_length=10, null=True)),
                ('narration', models.TextField(blank=True, null=True)),
                ('ledger', models.CharField(blank=True, choices=[('Both', 'Both'), ('Sub ledger', 'Sub ledger'), ('Main ledger', 'Main ledger')], max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AccountLedgerGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('nature', models.CharField(blank=True, choices=[('Select Nature', 'Select Nature'), ('N/A', 'N/A'), ('Income', 'Income'), ('Expenses', 'Expenses'), ('Liabilities', 'Liabilities'), ('Assets', 'Assets')], max_length=40, null=True)),
                ('under', models.CharField(blank=True, choices=[('Select Group', 'Select Group'), ('Bank Account', 'Bank Account'), ('Bank OD A/C', 'Bank OD A/C'), ('Branch/Divisions', 'Branch/Divisions'), ('Capital Account', 'Capital Account'), ('Cash in Hand', 'Cash in Hand'), ('Current Assets', 'Current Assets'), ('Current Liabilities', 'Current Liabilities'), ('Deposits (Assets)', 'Deposits (Assets)'), ('Direct Expenses', 'Direct Expenses'), ('Direct Income', 'Direct Income'), ('Duties & Taxes', 'Duties & Taxes'), ('Employee A/C', 'Employee A/C'), ('Fixed Assets', 'Fixed Assets'), ('Indirect Expenses', 'Indirect Expenses'), ('Indirect Income', 'Indirect Income'), ('Investments', 'Investments'), ('Loans & Advances(Asset)', 'Loans & Advances(Asset)'), ('Loans (Liability)', 'Loans (Liability)'), ('Misc.Expenses (Asset)', 'Misc.Expenses (Asset)'), ('Pharmacy Suppliers', 'Pharmacy Suppliers'), ('Primary', 'Primary'), ('Provisions', 'Provisions'), ('Purchase Account', 'Purchase Account'), ('Reserves & Surplus', 'Reserves & Surplus'), ('Sales Account', 'Sales Account'), ('Secured Loans', 'Secured Loans'), ('Service Account', 'Service Account'), ('Stock-in-Hand', 'Stock-in-Hand'), ('Sundry Creditors', 'Sundry Creditors'), ('Sundry Debtors', 'Sundry Debtors'), ('Suspense A/C', 'Suspense A/C'), ('Unsecured Loans', 'Unsecured Loans')], max_length=40, null=True)),
                ('narration', models.TextField(blank=True, null=True)),
                ('affectGrossProfit', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Admission_Discharge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='BankCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Bed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bed_no', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='BillingDraft',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='BillingMode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('billingmode', models.CharField(blank=True, max_length=50, null=True)),
                ('modeType', models.CharField(blank=True, choices=[('General', 'General'), ('Insurance', 'Insurance'), ('Government', 'Government'), ('Transportation', 'Transportation'), ('Organization', 'Organization'), ('Co-operate', 'Co-operate')], max_length=50, null=True)),
                ('active', models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BillReturn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('billNo', models.IntegerField(blank=True, null=True)),
                ('patientId', models.IntegerField(blank=True, null=True)),
                ('quanitity', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BudgetCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('categoryId', models.IntegerField(blank=True, null=True)),
                ('category', models.CharField(blank=True, max_length=50, null=True)),
                ('under', models.CharField(blank=True, choices=[('Primary', 'Primary')], max_length=50, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BudgetType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeName', models.CharField(blank=True, max_length=50, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('active', models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('phone_no', models.BigIntegerField(blank=True, null=True)),
                ('web', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
                ('pincode', models.IntegerField(blank=True, null=True)),
                ('PAN_No', models.IntegerField(blank=True, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='')),
                ('mailing_name', models.CharField(blank=True, default='N/A', max_length=100, null=True)),
                ('mobileNo', models.BigIntegerField(blank=True, null=True)),
                ('country', models.CharField(blank=True, default='N/A', max_length=100, null=True)),
                ('currency', models.CharField(blank=True, choices=[('Rupees', 'Rupees'), ('Dollor', 'Dollor'), ('Pound', 'Pound')], max_length=100, null=True)),
                ('cst_no', models.IntegerField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=100, null=True)),
                ('e_mail', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('state', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
                ('tin_no', models.IntegerField(blank=True, null=True)),
                ('chs_code', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Consultant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nmc_no', models.IntegerField(blank=True, default='N/A', null=True)),
                ('post', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
                ('e_mail', models.EmailField(blank=True, default='N/A', max_length=254, null=True, unique=True)),
                ('profile', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
                ('upload_image', models.ImageField(blank=True, null=True, upload_to='')),
                ('dr_name', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
                ('mobile', models.BigIntegerField(blank=True, null=True)),
                ('address', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
                ('avg_consultant_time', models.IntegerField(blank=True, null=True)),
                ('doctor_order', models.CharField(blank=True, default='null', max_length=20, null=True)),
                ('active', models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ConsultantType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_name', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CurrentOperativePlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient', models.IntegerField(null=True)),
                ('Description', models.TextField(blank=True, null=True)),
                ('procedure', models.CharField(blank=True, max_length=100, null=True)),
                ('surgeon', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(choices=[('Completed', 'Completed'), ('Dropped', 'Dropped'), ('Planned', 'Planned')], max_length=100)),
                ('caseComplexity', models.IntegerField(blank=True, null=True)),
                ('instructionsUponAdmission', models.TextField(blank=True, null=True)),
                ('additionalNotes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reportTitle', models.CharField(blank=True, max_length=50, null=True)),
                ('script', models.TextField(blank=True, null=True)),
                ('orderBy', models.CharField(blank=True, max_length=50, null=True)),
                ('parameters', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department_type', models.CharField(blank=True, choices=[('Consultation', 'Consultation'), ('Department', 'Department'), ('PatientWard', 'PatientWard'), ('Clinical', 'Clinical')], max_length=50, null=True)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='')),
                ('hod', models.CharField(blank=True, default='N/A', max_length=100, null=True)),
                ('department_name', models.CharField(blank=True, max_length=100, null=True)),
                ('department_status', models.CharField(blank=True, choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DepositReturn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='DisChargeBilling',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='DiscoutCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discountCategory', models.CharField(blank=True, max_length=50, null=True)),
                ('remarks', models.TextField(blank=True, default='N/A', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DueClerance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='EditPatient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FiscalYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('startdate', models.DateField(blank=True, null=True)),
                ('enddate', models.DateField(blank=True, null=True)),
                ('shortname', models.CharField(blank=True, default='N/A', max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Generic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
                ('therapeutic', models.CharField(blank=True, choices=[('N/A', 'N/A'), ('ANAESTHETICS', 'ANAESTHETICS'), ('ANALGESIC', 'ANALGESIC'), ('ANTHELMINTIC', 'ANTHELMINTIC'), ('ANTI DIARRHEAL', 'ANTI DIARRHEAL'), ('ANTIANGINAL/CORONARY VASODILATOR', 'ANTIANGINAL/CORONARY VASODILATOR'), ('ANTIARRYTHMIC', 'ANTIARRYTHMIC'), ('ANTIARTHRITICS', 'ANTIARTHRITICS'), ('ANTIASTHMATIC', 'ANTIASTHMATIC'), ('ANTIBIOTIC', 'ANTIBIOTIC'), ('ANTICOAGULANT', 'ANTICOAGULANT'), ('ANTICONVULSANT', 'ANTICONVULSANT'), ('ANTIDEPRESSANT', 'ANTIDEPRESSANT'), ('ANTIDOTES', 'ANTIDOTES'), ('ANTIEMETIC', 'ANTIEMETIC'), ('ANTIFUNGAL', 'ANTIFUNGAL'), ('ANTIGOUT', 'ANTIGOUT'), ('ANTIHAEMORRHAGIC', 'ANTIHAEMORRHAGIC'), ('ANTIHISTAMINE', 'ANTIHISTAMINE'), ('ANTIHYPERTENSIVE', 'ANTIHYPERTENSIVE'), ('ANTIMALARIAL', 'ANTIMALARIAL'), ('ANTIMICROBIAL', 'ANTIMICROBIAL'), ('ANTIMIGRAINE', 'ANTIMIGRAINE'), ('ANTINEOPLASTIC', 'ANTINEOPLASTIC'), ('ANTIPSYCHOTIC', 'ANTIPSYCHOTIC'), ('ANTIRHEUMATOID', 'ANTIRHEUMATOID'), ('ANTIPASMODIC', 'ANTIPASMODIC'), ('ANTIULCER', 'ANTIULCER'), ('ANTIVIRAL', 'ANTIVIRAL'), ('ANXIOLYTIC/SEDATIVE', 'ANXIOLYTIC/SEDATIVE'), ('AYURVEDIC', 'AYURVEDIC'), ('CHF DRUGS', 'CHF DRUGS'), ('CNS', 'CNS'), ('CONTRAST MEDIA', 'CONTRAST MEDIA'), ('CORTICOSTEROID', 'CORTICOSTEROID'), ('COUGH PREPARATION', 'COUGH PREPARATION'), ('DECONGESTANT', 'DECONGESTANT'), ('DIABETIC', 'DIABETIC'), ('DIURETICS', 'DIURETICS'), ('EAR/EYE PREP', 'EAR/EYE PREP'), ('ELECTORLYTES', 'ELECTORLYTES'), ('ENZYME/CARMINATIVE', 'ENZYME/CARMINATIVE'), ('GARGLES/MOUTH WASH', 'GARGLES/MOUTH WASH'), ('GASTROINTESTINAL', 'GASTROINTESTINAL'), ('GERMAN', 'GERMAN'), ('GERMAN', 'GERMAN'), ('GI RELAXANT/PROKINETICS', 'GI RELAXANT/PROKINETICS'), ('GROWTH DISORDER', 'GROWTH DISORDER'), ('HAEMATOPOIETIC GROWTH FACTOR', 'HAEMATOPOIETIC GROWTH FACTOR'), ('HEPATOBILIARY PREPARATION', 'HEPATOBILIARY PREPARATION'), ('HORMONE/STEROID PREP', 'HORMONE/STEROID PREP'), ('I/V SALINE', 'I/V SALINE'), ('IMMUNOGLOBIN', 'IMMUNOGLOBIN'), ('IODINE', 'IODINE'), ('LAXATIVE/PURGATIVE', 'LAXATIVE/PURGATIVE'), ('LIPID LOWERING AGENT', 'LIPID LOWERING AGENT'), ('METABOLISM', 'METABOLISM'), ('MISCELLANEOUS', 'MISCELLANEOUS'), ('MOOD ELEVATOR', 'MOOD ELEVATOR'), ('MUCOLYTICS AND PROKINETICS', 'MUCOLYTICS AND PROKINETICS'), ('MUSCLE RELAXANT', 'MUSCLE RELAXANT'), ('NASAL PREPARATION', 'NASAL PREPARATION'), ('NEUROMUSCULAR BLOCKER', 'NEUROMUSCULAR BLOCKER'), ('NON USE', 'NON USE'), ('NSAID', 'NSAID'), ('NUTRITION', 'NUTRITION'), ('OPOID', 'OPOID'), ('ORAL PRODUCT', 'ORAL PRODUCT'), ('THYROIDS+ANTITHYROID', 'THYROIDS+ANTITHYROID'), ('TOPICAL PREPARATION', 'TOPICAL PREPARATION'), ('UROGENITAL DRUGS', 'UROGENITAL DRUGS'), ('VASODILATOR AND VASOCONSTRICTORS', 'VASODILATOR AND VASOCONSTRICTORS'), ('VIT/NUTRITION SUPP', 'VIT/NUTRITION SUPP')], default='N/A', max_length=50, null=True)),
                ('narcotic', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GenericStrength',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('route', models.CharField(blank=True, choices=[('N/A', 'N/A'), ('ID(intra deomen)', 'ID(intra deomen)'), ('IM (intra masular)', 'IM (intra masular)'), ('Inhale', 'Inhale'), ('IO (intra osees)', 'IO (intra osees)'), ('IV (intra venous)', 'IV (intra venous)'), ('Nebuliser', 'Nebuliser'), ('PO (per oral)', 'PO (per oral)'), ('PR (per reatal)', 'PR (per reatal)'), ('PU (per vasinal)', 'PU (per vasinal)'), ('SC (sub cutaneous)', 'SC (sub cutaneous)'), ('sublingual', 'sublingual')], max_length=50, null=True)),
                ('strength', models.IntegerField(blank=True, null=True)),
                ('strength_unit', models.CharField(blank=True, max_length=50, null=True)),
                ('volume', models.IntegerField(blank=True, null=True)),
                ('volumeUnit', models.CharField(blank=True, max_length=50, null=True)),
                ('otherInfo', models.TextField(blank=True, null=True)),
                ('genericName', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.generic')),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Holiday',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_date', models.DateField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('menuName', models.CharField(blank=True, max_length=50, null=True)),
                ('hasSubMenu', models.BooleanField(blank=True, null=True)),
                ('URL', models.CharField(blank=True, max_length=50, null=True)),
                ('under', models.CharField(blank=True, choices=[('Home', 'Home'), ('Master', 'Master'), ('Account', 'Account'), ('Cashier', 'Cashier'), ('Laboratory', 'Laboratory'), ('Pharmacy', 'Pharmacy'), ('Store', 'Store'), ('Setting', 'Setting'), ('Report', 'Report'), ('Financial Report', 'Financial Report'), ('EMR', 'EMR'), ('Log', 'Log'), ('Budget', 'Budget'), ('Radiology', 'Radiology'), ('Thirdparty Report', 'Thirdparty Report'), ('Booking Report', 'Booking Report'), ('Insurance Cost', 'Insurance Cost'), ('Insurance Billing', 'Insurance Billing'), ('Product Rate', 'Product Rate'), ('Insurance Billing', 'Insurance Billing'), ('HMS Report', 'HMS Report'), ('Daily Billing', 'Daily Billing'), ('Bill by User', 'Bill by User'), ('Collection Report', 'Collection Report'), ('Patient Deposit Report', 'Patient Deposit Report'), ('Period Purchase Report', 'Period Purchase Report'), ('Sales Book Report', 'Sales Book Report'), ('Demand Package', 'Demand Package'), ('Cash Payment Voucher', 'Cash Payment Voucher'), ('Default Insurance Ledger', 'Default Insurance Ledger'), ('Overall Collection', 'Overall Collection'), ('Cash Reciept Payment Report', 'Cash Reciept Payment Report'), ('Medicine Package', 'Medicine Package'), ('Rack', 'Rack'), ('HMIS setting', 'HMIS setting'), ('Rack Management', 'Rack Management'), ('Pharmacy Due Clearance', 'Pharmacy Due Clearance'), ('Pharmacy Deposit Return', 'Pharmacy Deposit Return'), ('Medication Report', 'Medication Report'), ('ICU 1', 'ICU 1'), ('Group Wise Report', 'Group Wise Report'), ('Cashflow', 'Cashflow'), ('LabReport Verify', 'LabReport Verify'), ('Mapping', 'Mapping'), ('Custom Report', 'Custom Report'), ('HMIS', 'HMIS'), ('Feedback', 'Feedback'), ('Questionnaire List', 'Questionnaire List'), ('Patient Feedback List', 'Patient Feedback List'), ('List', 'List'), ('Insurance', 'Insurance'), ('Radiology Report Verify', 'Radiology Report Verify'), ('Emergency', 'Emergency'), ('Billing Draft', 'Billing Draft'), ('Gynaecology', 'Gynaecology'), ('OT/Procedure', 'OT/Procedure'), ('ECHO', 'ECHO'), ('OT Setting', 'OT Setting'), ('Primary', 'Primary')], max_length=40, null=True)),
                ('isOpen', models.BooleanField(blank=True, null=True)),
                ('iconName', models.CharField(blank=True, max_length=50, null=True)),
                ('isActive', models.BooleanField(blank=True, null=True)),
                ('isActiveWeb', models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.BooleanField(blank=True, null=True)),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.district')),
            ],
        ),
        migrations.CreateModel(
            name='PackSize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstName', models.CharField(max_length=100)),
                ('middleName', models.CharField(blank=True, max_length=100, null=True)),
                ('lastName', models.CharField(max_length=100)),
                ('sex', models.CharField(blank=True, max_length=50, null=True)),
                ('dateOfBirth', models.DateField(blank=True, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('placeOfBirth', models.CharField(blank=True, max_length=100, null=True)),
                ('occupation', models.CharField(blank=True, max_length=80, null=True)),
                ('patientStatus', models.CharField(blank=True, choices=[('Registered', 'Registered'), ('Admitted', 'Admitted'), ('Outpatient', 'Outpatient'), ('Inpatient', 'Inpatient')], max_length=100, null=True)),
                ('bloodType', models.CharField(choices=[('A+', 'A+'), ('A', 'A'), ('AB', 'AB'), ('AB+', 'AB+'), ('B+', 'B+'), ('B', 'B'), ('O+', 'O+'), ('O', 'O')], max_length=10)),
                ('referredDate', models.DateField(blank=True, null=True)),
                ('religion', models.CharField(blank=True, max_length=100, null=True)),
                ('parent_guardian', models.CharField(blank=True, max_length=200, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=80, null=True)),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('phone', models.BigIntegerField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('relationships', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PatientAllergies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient', models.IntegerField(null=True)),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PatientAppointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('startdate', models.DateField()),
                ('dischargeDate', models.DateField(blank=True, null=True)),
                ('startTime', models.TimeField(blank=True, null=True)),
                ('endTime', models.TimeField(blank=True, null=True)),
                ('allDay', models.BooleanField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(choices=[('Attended', 'Attended'), ('Scheduled', 'Scheduled'), ('Missed', 'Missed'), ('Cancelled', 'Cnacelled')], max_length=50)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('appointmentWith', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.consultant')),
            ],
        ),
        migrations.CreateModel(
            name='PatientTransit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='PatientVisitorPass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patientID', models.IntegerField(blank=True, null=True)),
                ('numberOfPass', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PatientVisitType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeName', models.CharField(max_length=200)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('patient', models.IntegerField(null=True)),
                ('amount', models.IntegerField()),
                ('method', models.CharField(choices=[('Cash', 'Cash'), ('Bank', 'Bank'), ('Online', 'Online')], default='Cash', max_length=50)),
                ('notes', models.TextField(blank=True, null=True)),
                ('paymentFor', models.CharField(choices=[('Deposit', 'Deposit'), ('Payment', 'Payment')], default='Payment', max_length=50)),
                ('bill', models.IntegerField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PrimaryDiagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient', models.IntegerField(null=True)),
                ('diagnosis', models.CharField(max_length=300)),
                ('date', models.DateField()),
                ('secondaryDiagnosis', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Referby',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_no', models.IntegerField(blank=True, null=True)),
                ('profile', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
                ('mobile', models.BigIntegerField(blank=True, null=True)),
                ('address', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
                ('status', models.CharField(blank=True, choices=[('Active', 'Active'), ('Inactive', 'Inactive')], default='N/A', max_length=10, null=True)),
                ('doctor_name', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
                ('post', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
                ('email', models.EmailField(blank=True, default='N/A', max_length=254, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReferCorporation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
                ('contact', models.BigIntegerField(blank=True, null=True)),
                ('address', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
                ('isActive', models.CharField(blank=True, choices=[('Active', 'Active'), ('Inactive', 'Inactive')], default='N/A', max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReportField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reportFieldTitleId', models.IntegerField()),
                ('fieldName', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('patientReportId', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roleName', models.CharField(blank=True, max_length=50, null=True)),
                ('role_status', models.CharField(blank=True, choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SampleList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('s_n', models.IntegerField(null=True)),
                ('patientName', models.CharField(max_length=400, null=True)),
                ('patientId', models.IntegerField(null=True)),
                ('sampleTypeTestId', models.IntegerField(null=True)),
                ('sampleType', models.CharField(max_length=200, null=True)),
                ('status', models.CharField(max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='SampleTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('unit', models.CharField(max_length=100)),
                ('reference_start_range', models.IntegerField(null=True)),
                ('reference_end_range', models.IntegerField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='SampleType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceCost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_name', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
                ('price', models.IntegerField(blank=True, null=True)),
                ('code', models.IntegerField(blank=True, null=True)),
                ('tax', models.CharField(blank=True, choices=[('N/A', 'N/A'), ('HST', 'HST'), ('VAT', 'VAT')], default='N/A', max_length=50, null=True)),
                ('d_qty', models.IntegerField(blank=True, null=True)),
                ('active', models.BooleanField(blank=True, null=True)),
                ('target', models.CharField(blank=True, choices=[('', '')], default='N/A', max_length=50, null=True)),
                ('unit', models.CharField(blank=True, choices=[('', '')], default='N/A', max_length=50, null=True)),
                ('fixed_rate', models.BooleanField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('interpretation', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(blank=True, default='N/A', max_length=100, null=True)),
                ('under', models.CharField(blank=True, choices=[('General service', 'General service'), ('Pathology', 'Pathology'), ('Radiology', 'Radiology'), ('AMBULANCE', 'AMBULANCE'), ('BED CHARGE', 'BED CHARGE'), ('BODY FLUID', 'BODY FLUID'), ('CARDIAC SURGERY', 'CARDIAC SURGERY'), ('DENTAL', 'DENTAL'), ('DERMATOLOGY', 'DERMATOLOGY'), ('ECG', 'ECG'), ('ENT', 'ENT'), ('EYE', 'EYE'), ('FORENSIC', 'FORENSIC'), ('GENERAL PROCEDURE', 'GENERAL PROCEDURE'), ('GENERAL STORE INCOME', 'GENERAL STORE INCOME'), ('GET PASS', 'GET PASS'), ('GYNAECOLOGY AND OBSTETRICS', 'GYNAECOLOGY AND OBSTETRICS'), ('MEDICAL', 'MEDICAL'), ('MEDICAL OPD', 'MEDICAL OPD'), ('MISCELLANEOUS', 'MISCELLANEOUS'), ('MONI PATI', 'MONI PATI'), ('OMR', 'OMR'), ('ORTHOPEDIC OPERATION CHARGE', 'ORTHOPEDIC OPERATION CHARGE'), ('OXYGEN', 'OXYGEN'), ('PHARMACY', 'PHARMACY'), ('PHOTOTHERAPY', 'PHOTOTHERAPY'), ('PHYSIOTHERAPY', 'PHYSIOTHERAPY'), ('PSYCHIATRY', 'PSYCHIATRY'), ('SALLON', 'SALLON'), ('VENTILATER CHARGE', 'VENTILATER CHARGE'), ('ER PROCEDURE', 'ER PROCEDURE')], max_length=50, null=True)),
                ('service_group_type', models.CharField(blank=True, choices=[('Target', 'Target'), ('Unit', 'Unit')], max_length=50, null=True)),
                ('active', models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ServicePackageCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Size',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('isActive', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Standard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SurgicalGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SymptomMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symptomEng', models.CharField(blank=True, max_length=50, null=True)),
                ('symptomNep', models.CharField(blank=True, max_length=50, null=True)),
                ('active', models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TotalCharge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('billId', models.IntegerField()),
                ('amount', models.BigIntegerField(default=0, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TotalPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient', models.IntegerField()),
                ('amount', models.IntegerField(default=0, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TypePatient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('discount', models.BigIntegerField(blank=True, null=True)),
                ('creditLimit', models.BigIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=20, null=True)),
                ('formalName', models.CharField(blank=True, max_length=50, null=True)),
                ('applyFor', models.CharField(choices=[('Medicine', 'Medicine'), ('Surgical', 'Surgical')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Ward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ward_no', models.IntegerField(blank=True, null=True)),
                ('ward_name', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Medicine',
            fields=[
                ('brandName', models.CharField(blank=True, max_length=50, null=True)),
                ('primaryUnit', models.IntegerField(blank=True, null=True)),
                ('preservatives', models.CharField(blank=True, max_length=50, null=True)),
                ('medicine_type', models.CharField(choices=[('Consumable', 'Consumable'), ('Non-Consumable', 'Non-Consumable')], max_length=50)),
                ('allow_tablet_break', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10)),
                ('active', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10)),
                ('genericSaltStrength', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.genericstrength')),
                ('ingredient', models.CharField(blank=True, max_length=50, null=True)),
                ('secondaryUnit', models.IntegerField(blank=True, null=True)),
                ('minStock', models.IntegerField(blank=True, null=True)),
                ('maxStock', models.IntegerField(blank=True, null=True)),
                ('tax', models.CharField(choices=[('N/A', 'N/A'), ('HST', 'HST'), ('VAT', 'VAT')], max_length=10)),
                ('manufacturer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.manufacturer')),
                ('packSize', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.packsize')),
                ('standard', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.standard')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.unit')),
            ],
        ),
        migrations.CreateModel(
            name='Surgical',
            fields=[
                ('surgicalName', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.surgicalgroup')),
                ('type_size', models.CharField(blank=True, max_length=50, null=True)),
                ('remarks', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Symptom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(blank=True, null=True)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.department')),
                ('symptom', models.ManyToManyField(to='api.symptommapping')),
            ],
        ),
        migrations.CreateModel(
            name='ShareSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('outValue', models.IntegerField(blank=True, null=True)),
                ('inType', models.CharField(blank=True, choices=[('Percentage', 'Percentage'), ('Amount', 'Amount')], max_length=20, null=True)),
                ('tax', models.IntegerField(blank=True, null=True)),
                ('startDate', models.DateField(blank=True, null=True)),
                ('outType', models.CharField(blank=True, choices=[('Percentage', 'Percentage'), ('Amount', 'Amount')], max_length=30, null=True)),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='doctor_consultant', to='api.consultant')),
                ('mode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.billingmode')),
                ('service', models.ManyToManyField(to='api.servicegroup')),
                ('source', models.ManyToManyField(to='api.consultant')),
            ],
        ),
        migrations.CreateModel(
            name='ServicePackage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('packageType', models.CharField(blank=True, choices=[('Service Package', 'Service Package'), ('Service Group', 'Service Group')], max_length=20, null=True)),
                ('groupName', models.CharField(blank=True, max_length=100, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('billingMode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.billingmode')),
                ('category', models.ManyToManyField(to='api.servicepackagecategory')),
                ('packageName', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.servicecost')),
            ],
        ),
        migrations.AddField(
            model_name='servicecost',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.servicegroup'),
        ),
        migrations.CreateModel(
            name='SampleTypeTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.IntegerField(null=True)),
                ('sampleId', models.IntegerField()),
                ('flag', models.CharField(blank=True, choices=[('H', 'H'), ('L', 'L')], max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sampleTest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.sampletest')),
                ('sampleType', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.sampletype')),
            ],
        ),
        migrations.AddField(
            model_name='sampletest',
            name='sampleType',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.sampletype'),
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receivedDate', models.DateField(auto_now_add=True)),
                ('requestersName', models.CharField(max_length=200)),
                ('labReportNote', models.TextField(null=True)),
                ('status', models.CharField(choices=[('Collect', 'Collect'), ('Collected', 'Collected'), ('Report', 'Report')], default='Collect', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('patientId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.patient')),
                ('sampleSource', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.department')),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_no', models.IntegerField()),
                ('roomName', models.CharField(blank=True, max_length=100, null=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.department')),
            ],
        ),
        migrations.CreateModel(
            name='Revenue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('totalRevenue', models.BigIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('fiscalYear', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.fiscalyear')),
                ('payments', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.payment')),
            ],
        ),
        migrations.CreateModel(
            name='ReportFieldTitle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fieldTitle', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.department')),
            ],
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patientNo', models.IntegerField(blank=True, null=True)),
                ('nhsioNo', models.IntegerField(blank=True, null=True)),
                ('newborn', models.BooleanField(blank=True, null=True)),
                ('autoBill', models.BooleanField(blank=True, null=True)),
                ('intRef', models.BooleanField(blank=True, null=True)),
                ('bookingId', models.IntegerField(blank=True, null=True)),
                ('firstName', models.CharField(blank=True, max_length=50, null=True)),
                ('lastName', models.CharField(blank=True, max_length=50, null=True)),
                ('wardNo', models.IntegerField(blank=True, null=True)),
                ('relation', models.CharField(blank=True, choices=[('MOTHER', 'MOTHER'), ('HUSBAND', 'HUSBAND'), ('FATHER', 'FATHER'), ('WIFE', 'WIFE'), ('SON', 'SON'), ('DAUGHTER', 'DAUGHTER'), ('OTHER', 'OTHER'), ('C/O', 'C/O'), ('BROTHER', 'BROTHER'), ('SISTER', 'SISTER'), ('UNCLE', 'UNCLE'), ('CHILD', 'CHILD'), ('COUSIN', 'COUSIN'), ('DAUGHTER IN-LAW', 'DAUGHTER IN-LAW'), ('SISTER IN-LAW', 'SISTER IN-LAW'), ('FRIENDS', 'FRIENDS'), ('GRANDSON', 'GRANDSON'), ('GRANDDAUGHTER', 'GRANDDAUGHTER'), ('GRANDFATHER', 'GRANDFATHER'), ('GRANDMOTHER', 'GRANDMOTHER'), ('MOTHER IN-LAW', 'MOTHER IN-LAW'), ('BROTHER IN-LAW', 'BROTHER IN-LAW'), ('SON IN-LAW', 'SON IN-LAW'), ('FATHER IN-LAW', 'FATHER IN-LAW'), ('NIECE', 'NIECE'), ('NEPHEW', 'NEPHEW'), ('AUNTY', 'AUNTY')], max_length=20, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('mobile', models.BigIntegerField(blank=True, null=True)),
                ('isFollowUp', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=50, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Others', 'Others')], max_length=10, null=True)),
                ('patientType', models.CharField(blank=True, choices=[('Select Patient Type', 'Select Patient Type'), ('GENERAL', 'GENERAL'), ('LAND DONAR', 'LAND DONAR'), ('ANC', 'ANC'), ('DH KUSMS STUDENT', 'DH KUSMS STUDENT'), ('GOVERNMENT INSURANCE', 'GOVERNMENT INSURANCE'), ('EYE CAMP', 'EYE CAMP'), ('SCHEER MEMORIAL HOSPITAL', 'SCHEER MEMORIAL HOSPITAL'), ('NEW BORN', 'NEW BORN'), ('Bahunepati H.C', 'Bahunepati H.C'), ('DH STAFF', 'DH STAFF'), ('BALUWA H.C', 'BALUWA H.C'), ('KU-STAFF', 'KU-STAFF'), ('DH-FAMILY', 'DH-FAMILY'), ('KUHS-STAFF', 'KUHS-STAFF'), ('KAVRE BUS PVT. LTD', 'KAVRE BUS PVT. LTD'), ('MATRON DISCOUNT', 'MATRON DISCOUNT'), ('GOVT. FREE TREATMENT-DHO', 'GOVT. FREE TREATMENT-DHO'), ('SURGICAL CAMP', 'SURGICAL CAMP'), ('SPONSOR PATIENT', 'SPONSOR PATIENT'), ('CAMP EXPENSES', 'CAMP EXPENSES'), ('RAN AWAY', 'RAN AWAY'), ('DHULIKHEL DRINKING WATER COMMUNITY', 'DHULIKHEL DRINKING WATER COMMUNITY'), ('Surgical Ward', 'Surgical Ward'), ('Medical Ward', 'Medical Ward'), ('SENIOR CITIZEN', 'SENIOR CITIZEN'), ('DH-FRIEND', 'DH-FRIEND'), ('OCMC(ONE-STOP CRISIS MANAGEMENT CENTER)', 'OCMC(ONE-STOP CRISIS MANAGEMENT CENTER)'), ('VANDOL', 'VANDOL'), ('CARDIAC CAMP', 'CARDIAC CAMP'), ('GNC', 'GNC'), ('PG EXAM', 'PG EXAM'), ('SUBIDHA CARD', 'SUBIDHA CARD'), ('ECDC', 'ECDC'), ('KU-STAFF FAMILY', 'KU-STAFF FAMILY'), ('KU-STUDENT', 'KU-STUDENT'), ('KUHS-STAFF FAMILY', 'KUHS-STAFF FAMILY'), ('KUHS-STUDENT', 'KUHS-STUDENT'), ('SEAP', 'SEAP'), ('BIPANNA NAGARIK', 'BIPANNA NAGARIK'), ('EXECUTIVE BOARD MEMBER / FAMILY', 'EXECUTIVE BOARD MEMBER / FAMILY'), ('SIKHAR INSURANCE', 'SIKHAR INSURANCE'), ('FOOD POISON KAVRE', 'FOOD POISON KAVRE'), ('ACADEMIC PURPOSE', 'ACADEMIC PURPOSE'), ('BOARD MEMBER (FAMILY)', 'BOARD MEMBER (FAMILY)'), ('SECOND OT', 'SECOND OT'), ('SINDHU HELAMBU YATAYAT SEWA P.LTD', 'SINDHU HELAMBU YATAYAT SEWA P.LTD'), ('GANESH HIMAL YATAYAT SEWA CO.PVT LTD', 'GANESH HIMAL YATAYAT SEWA CO.PVT LTD'), ('IVI-T003', 'IVI-T003'), ('NAMASTE STIFTUNG', 'NAMASTE STIFTUNG'), ('JYOTI BUDATHOKI', 'JYOTI BUDATHOKI'), ('CHIEF MINISTRY HEALTH PROGRAM', 'CHIEF MINISTRY HEALTH PROGRAM'), ('KATHMANDU UNIVERSITY', 'KATHMANDU UNIVERSITY'), ('IMMUNIZATION RESPONSE (DHO)', 'IMMUNIZATION RESPONSE (DHO)'), ('BHOMI HOSPITAL', 'BHOMI HOSPITAL'), ('PURBA ARANIKO YATAYAT PVT.LTD', 'PURBA ARANIKO YATAYAT PVT.LTD'), ('METABOLIC SYNDROME', 'METABOLIC SYNDROME'), ('RED PAGODA', 'RED PAGODA'), ('JANTRA', 'JANTRA'), ('MATRON DISCOUNT(IPD)', 'MATRON DISCOUNT(IPD)'), ('VANDOL(IPD)', 'VANDOL(IPD)'), ('MI KUSMS STUDENT', 'MI KUSMS STUDENT'), ('BOLDE PHEDICHE HEALTH CEN', 'BOLDE PHEDICHE HEALTH CEN'), ('KATTIKE DEURALI H.C', 'KATTIKE DEURALI H.C'), ('DOLAKHA HOSPITAL', 'DOLAKHA HOSPITAL'), ('ENT WARD', 'ENT WARD'), ('ENT WARD NEW', 'ENT WARD NEW'), ('PSYCHIATRIC WARD', 'PSYCHIATRIC WARD'), ('PNC WARD', 'PNC WARD'), ('REWARD', 'REWARD'), ('ORTHOPEDIC WARD', 'ORTHOPEDIC WARD'), ('CARDIO PULMONARY OPD', 'CARDIO PULMONARY OPD'), ('CORESMA PROJECT', 'CORESMA PROJECT'), ('MANEKHARKA H.C', 'MANEKHARKA H.C'), ('WARD', 'WARD'), ('BALARA H.C', 'BALARA H.C'), ('CHHATRA DEURALI H.C', 'CHHATRA DEURALI H.C'), ('DHUNGKHARKA H.C', 'DHUNGKHARKA H.C'), ('DORPU H.C', 'DORPU H.C'), ('DUMJA H.C', 'DUMJA H.C'), ('KIRNETAR H.C', 'KIRNETAR H.C'), ('MANIKHARKA H.C', 'MANIKHARKA H.C'), ('DERMATOLOGY WARD', 'DERMATOLOGY WARD'), ('DENTAL WARD', 'DENTAL WARD'), ('EMERGENCY ROOM', 'EMERGENCY ROOM'), ('ENDOSCOPY', 'ENDOSCOPY'), ('ENT OPD', 'ENT OPD'), ('GYNE OPD', 'GYNE OPD'), ('HEMATOLOGY', 'HEMATOLOGY'), ('HEMO DIALYSIS', 'HEMO DIALYSIS'), ('HIGH DEPENDANCY UNIT', 'HIGH DEPENDANCY UNIT'), ('IMMUNIZATION F/P', 'IMMUNIZATION F/P'), ('LUNDRY', 'LUNDRY'), ('MEDICINE OPD', 'MEDICINE OPD'), ('MICROBIOLOGY', 'MICROBIOLOGY'), ('NEONATAL', 'NEONATAL'), ('OPD', 'OPD'), ('OPERATION THEATER', 'OPERATION THEATER'), ('ORTHO OPD / PR', 'ORTHO OPD / PR'), ('OT GYANE', 'OT GYANE'), ('PEDRATIC OPD', 'PEDRATIC OPD'), ('PHYSIOTHERAPY', 'PHYSIOTHERAPY'), ('RADIOLOGY', 'RADIOLOGY'), ('SEAP II', 'SEAP II'), ('SURGERY OPD', 'SURGERY OPD'), ('SYAHAR', 'SYAHAR'), ('WHCPP (WH-NP)', 'WHCPP (WH-NP)'), ('PROSTHO DENTAL', 'PROSTHO DENTAL'), ('PERIPDONTICS DENTAL', 'PERIPDONTICS DENTAL'), ('ORTHODONTICS DENTAL', 'ORTHODONTICS DENTAL'), ('GYANE LABOUR ROOM II', 'GYANE LABOUR ROOM II'), ('CANTEEN', 'CANTEEN'), ('DH RTA(2022-05-04)', 'DH RTA(2022-05-04)'), ('RTA BA 3 KHHA 2643', 'RTA BA 3 KHHA 2643'), ('RTA BA2 KHHA 5778', 'RTA BA2 KHHA 5778'), ('NAWAKANTIPUR BHALAI TATHA COMPANY PVT BALAJU', 'NAWAKANTIPUR BHALAI TATHA COMPANY PVT BALAJU'), ('DH RTA (JA-4009)', 'DH RTA (JA-4009)'), ('AARSHU KAFLE', 'AARSHU KAFLE'), ('BLOOD BANK', 'BLOOD BANK'), ('HRDC', 'HRDC'), ('SURGERY WARD', 'SURGERY WARD'), ('SOCIAL SECURTIY FUND', 'SOCIAL SECURTIY FUND'), ('STAFF', 'STAFF'), ('UN STAFF', 'UN STAFF'), ('DAPCHA H.C', 'DAPCHA H.C'), ('PHALEBAS H.C', 'PHALEBAS H.C'), ('POST OP WARD', 'POST OP WARD'), ('PEDODENTIC DENTAL', 'PEDODENTIC DENTAL'), ('MGDM', 'MGDM'), ('GYANE EMERGENCY', 'GYANE EMERGENCY'), ('OMR DENTAL', 'OMR DENTAL'), ('HINDI H.C', 'HINDI H.C'), ('SOLAMBU H.C', 'SOLAMBU H.C'), ('THANGSING H.C', 'THANGSING H.C'), ('PUTTAR HEALTH CENTER', 'PUTTAR HEALTH CENTER'), ('EYE WARD', 'EYE WARD'), ('OPD EYE', 'OPD EYE'), ('SURGERY DENTAL', 'SURGERY DENTAL'), ('PROCEDURE ROOM', 'PROCEDURE ROOM'), ('CT SCAN', 'CT SCAN'), ('SICU WARD', 'SICU WARD'), ('ICU PEDRATIC WARD', 'ICU PEDRATIC WARD'), ('CATH LAB', 'CATH LAB'), ('PEDIATRIC WARD', 'PEDIATRIC WARD'), ('CSSD', 'CSSD'), ('FORENSIC', 'FORENSIC'), ('MRI', 'MRI'), ('URO OPD', 'URO OPD'), ('INTENSIVE CARE UNIT', 'INTENSIVE CARE UNIT'), ('LABOR ROOM', 'LABOR ROOM'), ('LABORATORY', 'LABORATORY'), ('PEDIATRIC HDU', 'PEDIATRIC HDU'), ('ULTRASOUND DEPT', 'ULTRASOUND DEPT'), ('CONS & ENDO DENTAL', 'CONS & ENDO DENTAL')], max_length=50, null=True)),
                ('c_o', models.CharField(blank=True, max_length=50, null=True)),
                ('passportNo', models.IntegerField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('panNo', models.IntegerField(blank=True, null=True)),
                ('billingMode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.billingmode')),
                ('consultant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.consultant')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.country')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.department')),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.district')),
                ('municipaltiy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.municipality')),
                ('referBy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.referby')),
                ('referCorpo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.refercorporation')),
            ],
        ),
        migrations.AddField(
            model_name='referby',
            name='corporation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.refercorporation'),
        ),
        migrations.CreateModel(
            name='RecieptVoucher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voucherNo', models.IntegerField(blank=True, null=True)),
                ('amount', models.IntegerField(blank=True, null=True)),
                ('chequeNo', models.IntegerField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('chequeDate', models.DateField(blank=True, null=True)),
                ('bank_cash', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.accountledger')),
                ('paidTo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='api.accountledger')),
            ],
        ),
        migrations.CreateModel(
            name='Prefix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('startIndex', models.IntegerField(blank=True, null=True)),
                ('startDate', models.DateField(blank=True, null=True)),
                ('suffix', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
                ('prefix_type', models.CharField(blank=True, choices=[('PatientID', 'PatientID'), ('EncounterID', 'EncounterID'), ('Counter Sale', 'Counter Sale'), ('Counter Return', 'Counter Return'), ('Pharmacy Sale', 'Pharmacy Sale'), ('Pharmacy return', 'Pharmacy return'), ('Deposit', 'Deposit'), ('Purchases', 'Purchases'), ('Purchases Return', 'Purchases Return'), ('SampleID', 'SampleID'), ('Demand', 'Demand'), ('Supply', 'Supply'), ('IpNo', 'IpNo'), ('dakhila', 'dakhila'), ('StockOut', 'StockOut'), ('Booking', 'Booking'), ('Pharmacy Deposit', 'Pharmacy Deposit'), ('CashPaymentVoucher', 'CashPaymentVoucher'), ('FixedAssets', 'FixedAssets'), ('PurchaseOrder', 'PurchaseOrder'), ('MembershipCode', 'MembershipCode'), ('DischargeMapping', 'DischargeMapping')], max_length=50, null=True)),
                ('prefix', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
                ('endDate', models.DateField(blank=True, null=True)),
                ('fiscalYear', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.fiscalyear')),
            ],
        ),
        migrations.CreateModel(
            name='PDCclearance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voucherNo', models.IntegerField(blank=True, null=True)),
                ('voucherDate', models.DateField(blank=True, null=True)),
                ('voucherType', models.CharField(blank=True, choices=[('Choose Type', 'Choose Type'), ('PDC Payabale', 'PDC Payabale'), ('PDC Recievable', 'PDC Recievable')], max_length=20, null=True)),
                ('chequeNo', models.IntegerField(blank=True, null=True)),
                ('chequeDate', models.DateField(blank=True, null=True)),
                ('amount', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(blank=True, choices=[('Choose Status', 'Choose Status'), ('Return', 'Return'), ('Cleared', 'Cleared'), ('Bounced', 'Bounced'), ('Cancelled', 'Cancelled')], max_length=20, null=True)),
                ('narration', models.TextField(blank=True, null=True)),
                ('accountLedger', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.accountledger')),
                ('bank', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bank_ac_ledger', to='api.accountledger')),
            ],
        ),
        migrations.CreateModel(
            name='PDC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pdc_type', models.CharField(blank=True, choices=[('Choose Type', 'Choose Type'), ('Payabale', 'Payabale'), ('Recievable', 'Recievable')], max_length=20, null=True)),
                ('voucherNo', models.IntegerField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('amount', models.IntegerField(blank=True, null=True)),
                ('chequeNo', models.IntegerField(blank=True, null=True)),
                ('chequeDate', models.DateField(blank=True, null=True)),
                ('narration', models.TextField(blank=True, null=True)),
                ('printAfterSave', models.BooleanField(blank=True, null=True)),
                ('accountLedger', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.accountledger')),
                ('bank', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='api.accountledger')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentVoucher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voucherNo', models.IntegerField(blank=True, null=True)),
                ('amount', models.IntegerField(blank=True, null=True)),
                ('chequeNo', models.IntegerField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('chequeDate', models.DateField(blank=True, null=True)),
                ('bank_cash', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.accountledger')),
                ('paidTo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='paidTo_ac_ledger', to='api.accountledger')),
            ],
        ),
        migrations.CreateModel(
            name='PatientVisit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('dischargeDate', models.DateField()),
                ('location', models.CharField(max_length=200, null=True)),
                ('reasonForVisit', models.TextField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('appointments', models.ManyToManyField(blank=True, to='api.patientappointment')),
                ('bed_no', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.bed')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.department')),
                ('examiner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.consultant')),
                ('patient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.patient')),
                ('roomsToAttend', models.ManyToManyField(blank=True, to='api.room')),
                ('visitType', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.patientvisittype')),
                ('ward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.ward')),
            ],
        ),
        migrations.CreateModel(
            name='PatientSurgery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('startTime', models.TimeField()),
                ('endTime', models.TimeField()),
                ('allDay', models.BooleanField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('notes', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.department')),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.patient')),
                ('room_no', models.ManyToManyField(to='api.room')),
                ('surgeryWith', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.consultant')),
            ],
        ),
        migrations.CreateModel(
            name='PatientSchemeDiscount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patientType', models.CharField(blank=True, choices=[('Select Patient Type', 'Select Patient Type'), ('GENERAL', 'GENERAL'), ('LAND DONAR', 'LAND DONAR'), ('ANC', 'ANC'), ('DH KUSMS STUDENT', 'DH KUSMS STUDENT'), ('GOVERNMENT INSURANCE', 'GOVERNMENT INSURANCE'), ('EYE CAMP', 'EYE CAMP'), ('SCHEER MEMORIAL HOSPITAL', 'SCHEER MEMORIAL HOSPITAL'), ('NEW BORN', 'NEW BORN'), ('Bahunepati H.C', 'Bahunepati H.C'), ('DH STAFF', 'DH STAFF'), ('BALUWA H.C', 'BALUWA H.C'), ('KU-STAFF', 'KU-STAFF'), ('DH-FAMILY', 'DH-FAMILY'), ('KUHS-STAFF', 'KUHS-STAFF'), ('KAVRE BUS PVT. LTD', 'KAVRE BUS PVT. LTD'), ('MATRON DISCOUNT', 'MATRON DISCOUNT'), ('GOVT. FREE TREATMENT-DHO', 'GOVT. FREE TREATMENT-DHO'), ('SURGICAL CAMP', 'SURGICAL CAMP'), ('SPONSOR PATIENT', 'SPONSOR PATIENT'), ('CAMP EXPENSES', 'CAMP EXPENSES'), ('RAN AWAY', 'RAN AWAY'), ('DHULIKHEL DRINKING WATER COMMUNITY', 'DHULIKHEL DRINKING WATER COMMUNITY'), ('Surgical Ward', 'Surgical Ward'), ('Medical Ward', 'Medical Ward'), ('SENIOR CITIZEN', 'SENIOR CITIZEN'), ('DH-FRIEND', 'DH-FRIEND'), ('OCMC(ONE-STOP CRISIS MANAGEMENT CENTER)', 'OCMC(ONE-STOP CRISIS MANAGEMENT CENTER)'), ('VANDOL', 'VANDOL'), ('CARDIAC CAMP', 'CARDIAC CAMP'), ('GNC', 'GNC'), ('PG EXAM', 'PG EXAM'), ('SUBIDHA CARD', 'SUBIDHA CARD'), ('ECDC', 'ECDC'), ('KU-STAFF FAMILY', 'KU-STAFF FAMILY'), ('KU-STUDENT', 'KU-STUDENT'), ('KUHS-STAFF FAMILY', 'KUHS-STAFF FAMILY'), ('KUHS-STUDENT', 'KUHS-STUDENT'), ('SEAP', 'SEAP'), ('BIPANNA NAGARIK', 'BIPANNA NAGARIK'), ('EXECUTIVE BOARD MEMBER / FAMILY', 'EXECUTIVE BOARD MEMBER / FAMILY'), ('SIKHAR INSURANCE', 'SIKHAR INSURANCE'), ('FOOD POISON KAVRE', 'FOOD POISON KAVRE'), ('ACADEMIC PURPOSE', 'ACADEMIC PURPOSE'), ('BOARD MEMBER (FAMILY)', 'BOARD MEMBER (FAMILY)'), ('SECOND OT', 'SECOND OT'), ('SINDHU HELAMBU YATAYAT SEWA P.LTD', 'SINDHU HELAMBU YATAYAT SEWA P.LTD'), ('GANESH HIMAL YATAYAT SEWA CO.PVT LTD', 'GANESH HIMAL YATAYAT SEWA CO.PVT LTD'), ('IVI-T003', 'IVI-T003'), ('NAMASTE STIFTUNG', 'NAMASTE STIFTUNG'), ('JYOTI BUDATHOKI', 'JYOTI BUDATHOKI'), ('CHIEF MINISTRY HEALTH PROGRAM', 'CHIEF MINISTRY HEALTH PROGRAM'), ('KATHMANDU UNIVERSITY', 'KATHMANDU UNIVERSITY'), ('IMMUNIZATION RESPONSE (DHO)', 'IMMUNIZATION RESPONSE (DHO)'), ('BHOMI HOSPITAL', 'BHOMI HOSPITAL'), ('PURBA ARANIKO YATAYAT PVT.LTD', 'PURBA ARANIKO YATAYAT PVT.LTD'), ('METABOLIC SYNDROME', 'METABOLIC SYNDROME'), ('RED PAGODA', 'RED PAGODA'), ('JANTRA', 'JANTRA'), ('MATRON DISCOUNT(IPD)', 'MATRON DISCOUNT(IPD)'), ('VANDOL(IPD)', 'VANDOL(IPD)'), ('MI KUSMS STUDENT', 'MI KUSMS STUDENT'), ('BOLDE PHEDICHE HEALTH CEN', 'BOLDE PHEDICHE HEALTH CEN'), ('KATTIKE DEURALI H.C', 'KATTIKE DEURALI H.C'), ('DOLAKHA HOSPITAL', 'DOLAKHA HOSPITAL'), ('ENT WARD', 'ENT WARD'), ('ENT WARD NEW', 'ENT WARD NEW'), ('PSYCHIATRIC WARD', 'PSYCHIATRIC WARD'), ('PNC WARD', 'PNC WARD'), ('REWARD', 'REWARD'), ('ORTHOPEDIC WARD', 'ORTHOPEDIC WARD'), ('CARDIO PULMONARY OPD', 'CARDIO PULMONARY OPD'), ('CORESMA PROJECT', 'CORESMA PROJECT'), ('MANEKHARKA H.C', 'MANEKHARKA H.C'), ('WARD', 'WARD'), ('BALARA H.C', 'BALARA H.C'), ('CHHATRA DEURALI H.C', 'CHHATRA DEURALI H.C'), ('DHUNGKHARKA H.C', 'DHUNGKHARKA H.C'), ('DORPU H.C', 'DORPU H.C'), ('DUMJA H.C', 'DUMJA H.C'), ('KIRNETAR H.C', 'KIRNETAR H.C'), ('MANIKHARKA H.C', 'MANIKHARKA H.C'), ('DERMATOLOGY WARD', 'DERMATOLOGY WARD'), ('DENTAL WARD', 'DENTAL WARD'), ('EMERGENCY ROOM', 'EMERGENCY ROOM'), ('ENDOSCOPY', 'ENDOSCOPY'), ('ENT OPD', 'ENT OPD'), ('GYNE OPD', 'GYNE OPD'), ('HEMATOLOGY', 'HEMATOLOGY'), ('HEMO DIALYSIS', 'HEMO DIALYSIS'), ('HIGH DEPENDANCY UNIT', 'HIGH DEPENDANCY UNIT'), ('IMMUNIZATION F/P', 'IMMUNIZATION F/P'), ('LUNDRY', 'LUNDRY'), ('MEDICINE OPD', 'MEDICINE OPD'), ('MICROBIOLOGY', 'MICROBIOLOGY'), ('NEONATAL', 'NEONATAL'), ('OPD', 'OPD'), ('OPERATION THEATER', 'OPERATION THEATER'), ('ORTHO OPD / PR', 'ORTHO OPD / PR'), ('OT GYANE', 'OT GYANE'), ('PEDRATIC OPD', 'PEDRATIC OPD'), ('PHYSIOTHERAPY', 'PHYSIOTHERAPY'), ('RADIOLOGY', 'RADIOLOGY'), ('SEAP II', 'SEAP II'), ('SURGERY OPD', 'SURGERY OPD'), ('SYAHAR', 'SYAHAR'), ('WHCPP (WH-NP)', 'WHCPP (WH-NP)'), ('PROSTHO DENTAL', 'PROSTHO DENTAL'), ('PERIPDONTICS DENTAL', 'PERIPDONTICS DENTAL'), ('ORTHODONTICS DENTAL', 'ORTHODONTICS DENTAL'), ('GYANE LABOUR ROOM II', 'GYANE LABOUR ROOM II'), ('CANTEEN', 'CANTEEN'), ('DH RTA(2022-05-04)', 'DH RTA(2022-05-04)'), ('RTA BA 3 KHHA 2643', 'RTA BA 3 KHHA 2643'), ('RTA BA2 KHHA 5778', 'RTA BA2 KHHA 5778'), ('NAWAKANTIPUR BHALAI TATHA COMPANY PVT BALAJU', 'NAWAKANTIPUR BHALAI TATHA COMPANY PVT BALAJU'), ('DH RTA (JA-4009)', 'DH RTA (JA-4009)'), ('AARSHU KAFLE', 'AARSHU KAFLE'), ('BLOOD BANK', 'BLOOD BANK'), ('HRDC', 'HRDC'), ('SURGERY WARD', 'SURGERY WARD'), ('SOCIAL SECURTIY FUND', 'SOCIAL SECURTIY FUND'), ('STAFF', 'STAFF'), ('UN STAFF', 'UN STAFF'), ('DAPCHA H.C', 'DAPCHA H.C'), ('PHALEBAS H.C', 'PHALEBAS H.C'), ('POST OP WARD', 'POST OP WARD'), ('PEDODENTIC DENTAL', 'PEDODENTIC DENTAL'), ('MGDM', 'MGDM'), ('GYANE EMERGENCY', 'GYANE EMERGENCY'), ('OMR DENTAL', 'OMR DENTAL'), ('HINDI H.C', 'HINDI H.C'), ('SOLAMBU H.C', 'SOLAMBU H.C'), ('THANGSING H.C', 'THANGSING H.C'), ('PUTTAR HEALTH CENTER', 'PUTTAR HEALTH CENTER'), ('EYE WARD', 'EYE WARD'), ('OPD EYE', 'OPD EYE'), ('SURGERY DENTAL', 'SURGERY DENTAL'), ('PROCEDURE ROOM', 'PROCEDURE ROOM'), ('CT SCAN', 'CT SCAN'), ('SICU WARD', 'SICU WARD'), ('ICU PEDRATIC WARD', 'ICU PEDRATIC WARD'), ('CATH LAB', 'CATH LAB'), ('PEDIATRIC WARD', 'PEDIATRIC WARD'), ('CSSD', 'CSSD'), ('FORENSIC', 'FORENSIC'), ('MRI', 'MRI'), ('URO OPD', 'URO OPD'), ('INTENSIVE CARE UNIT', 'INTENSIVE CARE UNIT'), ('LABOR ROOM', 'LABOR ROOM'), ('LABORATORY', 'LABORATORY'), ('PEDIATRIC HDU', 'PEDIATRIC HDU'), ('ULTRASOUND DEPT', 'ULTRASOUND DEPT'), ('CONS & ENDO DENTAL', 'CONS & ENDO DENTAL')], max_length=50, null=True)),
                ('discount', models.IntegerField(blank=True, null=True)),
                ('opd', models.BooleanField(blank=True, null=True)),
                ('ipd', models.BooleanField(blank=True, null=True)),
                ('emergency', models.BooleanField(blank=True, null=True)),
                ('discountFixedRakhne', models.BooleanField(blank=True, null=True)),
                ('rateFixedRakhne', models.BooleanField(blank=True, null=True)),
                ('billingMode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.billingmode')),
                ('serviceGroup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.servicegroup')),
            ],
        ),
        migrations.CreateModel(
            name='PatientReporting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('appointment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.patientappointment')),
                ('doctor_consultant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.consultant')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.patient')),
                ('surgery', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.patientsurgery')),
                ('visit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.patientvisit')),
            ],
        ),
        migrations.CreateModel(
            name='PatientNotes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient', models.IntegerField(null=True)),
                ('note', models.TextField()),
                ('created_at', models.DateField(auto_now_add=True)),
                ('onBehalfOf', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.consultant')),
                ('visit', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.patientvisittype')),
            ],
        ),
        migrations.AddField(
            model_name='patientappointment',
            name='appointment_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.patientvisittype'),
        ),
        migrations.AddField(
            model_name='patientappointment',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.department'),
        ),
        migrations.AddField(
            model_name='patientappointment',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.patient'),
        ),
        migrations.AddField(
            model_name='patientappointment',
            name='rooms',
            field=models.ManyToManyField(blank=True, to='api.room'),
        ),
        migrations.AddField(
            model_name='patient',
            name='patientType',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.typepatient'),
        ),
        migrations.AddField(
            model_name='patient',
            name='referBy',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.referby'),
        ),
        migrations.CreateModel(
            name='MembershipRegisteration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('membershipType', models.CharField(blank=True, choices=[('Select Patient Type', 'Select Patient Type'), ('GENERAL', 'GENERAL'), ('LAND DONAR', 'LAND DONAR'), ('ANC', 'ANC'), ('DH KUSMS STUDENT', 'DH KUSMS STUDENT'), ('GOVERNMENT INSURANCE', 'GOVERNMENT INSURANCE'), ('EYE CAMP', 'EYE CAMP'), ('SCHEER MEMORIAL HOSPITAL', 'SCHEER MEMORIAL HOSPITAL'), ('NEW BORN', 'NEW BORN'), ('Bahunepati H.C', 'Bahunepati H.C'), ('DH STAFF', 'DH STAFF'), ('BALUWA H.C', 'BALUWA H.C'), ('KU-STAFF', 'KU-STAFF'), ('DH-FAMILY', 'DH-FAMILY'), ('KUHS-STAFF', 'KUHS-STAFF'), ('KAVRE BUS PVT. LTD', 'KAVRE BUS PVT. LTD'), ('MATRON DISCOUNT', 'MATRON DISCOUNT'), ('GOVT. FREE TREATMENT-DHO', 'GOVT. FREE TREATMENT-DHO'), ('SURGICAL CAMP', 'SURGICAL CAMP'), ('SPONSOR PATIENT', 'SPONSOR PATIENT'), ('CAMP EXPENSES', 'CAMP EXPENSES'), ('RAN AWAY', 'RAN AWAY'), ('DHULIKHEL DRINKING WATER COMMUNITY', 'DHULIKHEL DRINKING WATER COMMUNITY'), ('Surgical Ward', 'Surgical Ward'), ('Medical Ward', 'Medical Ward'), ('SENIOR CITIZEN', 'SENIOR CITIZEN'), ('DH-FRIEND', 'DH-FRIEND'), ('OCMC(ONE-STOP CRISIS MANAGEMENT CENTER)', 'OCMC(ONE-STOP CRISIS MANAGEMENT CENTER)'), ('VANDOL', 'VANDOL'), ('CARDIAC CAMP', 'CARDIAC CAMP'), ('GNC', 'GNC'), ('PG EXAM', 'PG EXAM'), ('SUBIDHA CARD', 'SUBIDHA CARD'), ('ECDC', 'ECDC'), ('KU-STAFF FAMILY', 'KU-STAFF FAMILY'), ('KU-STUDENT', 'KU-STUDENT'), ('KUHS-STAFF FAMILY', 'KUHS-STAFF FAMILY'), ('KUHS-STUDENT', 'KUHS-STUDENT'), ('SEAP', 'SEAP'), ('BIPANNA NAGARIK', 'BIPANNA NAGARIK'), ('EXECUTIVE BOARD MEMBER / FAMILY', 'EXECUTIVE BOARD MEMBER / FAMILY'), ('SIKHAR INSURANCE', 'SIKHAR INSURANCE'), ('FOOD POISON KAVRE', 'FOOD POISON KAVRE'), ('ACADEMIC PURPOSE', 'ACADEMIC PURPOSE'), ('BOARD MEMBER (FAMILY)', 'BOARD MEMBER (FAMILY)'), ('SECOND OT', 'SECOND OT'), ('SINDHU HELAMBU YATAYAT SEWA P.LTD', 'SINDHU HELAMBU YATAYAT SEWA P.LTD'), ('GANESH HIMAL YATAYAT SEWA CO.PVT LTD', 'GANESH HIMAL YATAYAT SEWA CO.PVT LTD'), ('IVI-T003', 'IVI-T003'), ('NAMASTE STIFTUNG', 'NAMASTE STIFTUNG'), ('JYOTI BUDATHOKI', 'JYOTI BUDATHOKI'), ('CHIEF MINISTRY HEALTH PROGRAM', 'CHIEF MINISTRY HEALTH PROGRAM'), ('KATHMANDU UNIVERSITY', 'KATHMANDU UNIVERSITY'), ('IMMUNIZATION RESPONSE (DHO)', 'IMMUNIZATION RESPONSE (DHO)'), ('BHOMI HOSPITAL', 'BHOMI HOSPITAL'), ('PURBA ARANIKO YATAYAT PVT.LTD', 'PURBA ARANIKO YATAYAT PVT.LTD'), ('METABOLIC SYNDROME', 'METABOLIC SYNDROME'), ('RED PAGODA', 'RED PAGODA'), ('JANTRA', 'JANTRA'), ('MATRON DISCOUNT(IPD)', 'MATRON DISCOUNT(IPD)'), ('VANDOL(IPD)', 'VANDOL(IPD)'), ('MI KUSMS STUDENT', 'MI KUSMS STUDENT'), ('BOLDE PHEDICHE HEALTH CEN', 'BOLDE PHEDICHE HEALTH CEN'), ('KATTIKE DEURALI H.C', 'KATTIKE DEURALI H.C'), ('DOLAKHA HOSPITAL', 'DOLAKHA HOSPITAL'), ('ENT WARD', 'ENT WARD'), ('ENT WARD NEW', 'ENT WARD NEW'), ('PSYCHIATRIC WARD', 'PSYCHIATRIC WARD'), ('PNC WARD', 'PNC WARD'), ('REWARD', 'REWARD'), ('ORTHOPEDIC WARD', 'ORTHOPEDIC WARD'), ('CARDIO PULMONARY OPD', 'CARDIO PULMONARY OPD'), ('CORESMA PROJECT', 'CORESMA PROJECT'), ('MANEKHARKA H.C', 'MANEKHARKA H.C'), ('WARD', 'WARD'), ('BALARA H.C', 'BALARA H.C'), ('CHHATRA DEURALI H.C', 'CHHATRA DEURALI H.C'), ('DHUNGKHARKA H.C', 'DHUNGKHARKA H.C'), ('DORPU H.C', 'DORPU H.C'), ('DUMJA H.C', 'DUMJA H.C'), ('KIRNETAR H.C', 'KIRNETAR H.C'), ('MANIKHARKA H.C', 'MANIKHARKA H.C'), ('DERMATOLOGY WARD', 'DERMATOLOGY WARD'), ('DENTAL WARD', 'DENTAL WARD'), ('EMERGENCY ROOM', 'EMERGENCY ROOM'), ('ENDOSCOPY', 'ENDOSCOPY'), ('ENT OPD', 'ENT OPD'), ('GYNE OPD', 'GYNE OPD'), ('HEMATOLOGY', 'HEMATOLOGY'), ('HEMO DIALYSIS', 'HEMO DIALYSIS'), ('HIGH DEPENDANCY UNIT', 'HIGH DEPENDANCY UNIT'), ('IMMUNIZATION F/P', 'IMMUNIZATION F/P'), ('LUNDRY', 'LUNDRY'), ('MEDICINE OPD', 'MEDICINE OPD'), ('MICROBIOLOGY', 'MICROBIOLOGY'), ('NEONATAL', 'NEONATAL'), ('OPD', 'OPD'), ('OPERATION THEATER', 'OPERATION THEATER'), ('ORTHO OPD / PR', 'ORTHO OPD / PR'), ('OT GYANE', 'OT GYANE'), ('PEDRATIC OPD', 'PEDRATIC OPD'), ('PHYSIOTHERAPY', 'PHYSIOTHERAPY'), ('RADIOLOGY', 'RADIOLOGY'), ('SEAP II', 'SEAP II'), ('SURGERY OPD', 'SURGERY OPD'), ('SYAHAR', 'SYAHAR'), ('WHCPP (WH-NP)', 'WHCPP (WH-NP)'), ('PROSTHO DENTAL', 'PROSTHO DENTAL'), ('PERIPDONTICS DENTAL', 'PERIPDONTICS DENTAL'), ('ORTHODONTICS DENTAL', 'ORTHODONTICS DENTAL'), ('GYANE LABOUR ROOM II', 'GYANE LABOUR ROOM II'), ('CANTEEN', 'CANTEEN'), ('DH RTA(2022-05-04)', 'DH RTA(2022-05-04)'), ('RTA BA 3 KHHA 2643', 'RTA BA 3 KHHA 2643'), ('RTA BA2 KHHA 5778', 'RTA BA2 KHHA 5778'), ('NAWAKANTIPUR BHALAI TATHA COMPANY PVT BALAJU', 'NAWAKANTIPUR BHALAI TATHA COMPANY PVT BALAJU'), ('DH RTA (JA-4009)', 'DH RTA (JA-4009)'), ('AARSHU KAFLE', 'AARSHU KAFLE'), ('BLOOD BANK', 'BLOOD BANK'), ('HRDC', 'HRDC'), ('SURGERY WARD', 'SURGERY WARD'), ('SOCIAL SECURTIY FUND', 'SOCIAL SECURTIY FUND'), ('STAFF', 'STAFF'), ('UN STAFF', 'UN STAFF'), ('DAPCHA H.C', 'DAPCHA H.C'), ('PHALEBAS H.C', 'PHALEBAS H.C'), ('POST OP WARD', 'POST OP WARD'), ('PEDODENTIC DENTAL', 'PEDODENTIC DENTAL'), ('MGDM', 'MGDM'), ('GYANE EMERGENCY', 'GYANE EMERGENCY'), ('OMR DENTAL', 'OMR DENTAL'), ('HINDI H.C', 'HINDI H.C'), ('SOLAMBU H.C', 'SOLAMBU H.C'), ('THANGSING H.C', 'THANGSING H.C'), ('PUTTAR HEALTH CENTER', 'PUTTAR HEALTH CENTER'), ('EYE WARD', 'EYE WARD'), ('OPD EYE', 'OPD EYE'), ('SURGERY DENTAL', 'SURGERY DENTAL'), ('PROCEDURE ROOM', 'PROCEDURE ROOM'), ('CT SCAN', 'CT SCAN'), ('SICU WARD', 'SICU WARD'), ('ICU PEDRATIC WARD', 'ICU PEDRATIC WARD'), ('CATH LAB', 'CATH LAB'), ('PEDIATRIC WARD', 'PEDIATRIC WARD'), ('CSSD', 'CSSD'), ('FORENSIC', 'FORENSIC'), ('MRI', 'MRI'), ('URO OPD', 'URO OPD'), ('INTENSIVE CARE UNIT', 'INTENSIVE CARE UNIT'), ('LABOR ROOM', 'LABOR ROOM'), ('LABORATORY', 'LABORATORY'), ('PEDIATRIC HDU', 'PEDIATRIC HDU'), ('ULTRASOUND DEPT', 'ULTRASOUND DEPT'), ('CONS & ENDO DENTAL', 'CONS & ENDO DENTAL')], max_length=50, null=True)),
                ('firstName', models.CharField(blank=True, max_length=50, null=True)),
                ('lastName', models.CharField(blank=True, max_length=50, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Others', 'Others')], max_length=10, null=True)),
                ('wardNo', models.IntegerField(blank=True, null=True)),
                ('street', models.CharField(blank=True, max_length=50, null=True)),
                ('mobile', models.BigIntegerField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('pharmacyDiscount', models.IntegerField(blank=True, null=True)),
                ('isActive', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10)),
                ('billingDiscount', models.IntegerField(blank=True, null=True)),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.district')),
                ('municipality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.municipality')),
            ],
        ),
        migrations.CreateModel(
            name='JournalVoucherSub',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voucherNo', models.IntegerField(blank=True, null=True)),
                ('journalVoucherType', models.CharField(blank=True, choices=[('Expenditure', 'Expenditure'), ('Income', 'Income')], max_length=20, null=True)),
                ('debit_credit', models.CharField(blank=True, choices=[('Dr.', 'Dr.'), ('Cr.', 'Cr.')], max_length=10, null=True)),
                ('amount', models.IntegerField(blank=True, null=True)),
                ('cheque_no', models.IntegerField(blank=True, null=True)),
                ('cheque_date', models.DateField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('accountLedger', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.accountledger')),
                ('subLedger', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subLedger', to='api.accountledger')),
            ],
        ),
        migrations.CreateModel(
            name='Emergency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sentinelEvent', models.BooleanField(blank=True, null=True)),
                ('dateOfIncident', models.DateTimeField()),
                ('incidentReportedTo', models.CharField(blank=True, max_length=200, null=True)),
                ('category', models.CharField(blank=True, max_length=100, null=True)),
                ('incidentCausedBy', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(default='Reported', max_length=100)),
                ('incidentDescription', models.TextField(blank=True, null=True)),
                ('transferredFrom', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateField(auto_now_add=True)),
                ('patientImpacted', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.patient')),
                ('to_department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.department')),
                ('to_room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.room')),
            ],
        ),
        migrations.CreateModel(
            name='DoctorSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dateType', models.CharField(blank=True, choices=[('All days', 'All days'), ('Specific', 'Specific'), ('Sunday', 'Sunday'), ('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday')], default='N/A', max_length=50, null=True)),
                ('registration_start_time', models.TimeField(blank=True, null=True)),
                ('registration_days', models.IntegerField(blank=True, default=100, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('schedule_type', models.CharField(blank=True, choices=[('Zero', 'Zero'), ('Unlimited', 'Unlimited'), ('Fixed', 'Fixed')], default='N/A', max_length=50, null=True)),
                ('registration_end_time', models.TimeField(blank=True, null=True)),
                ('booking_days', models.IntegerField(blank=True, default=100, null=True)),
                ('regd', models.IntegerField(blank=True, null=True)),
                ('booking_start_time', models.TimeField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('booking', models.IntegerField(blank=True, null=True)),
                ('booking_end_time', models.TimeField(blank=True, null=True)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.department')),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.consultant')),
                ('mode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.billingmode')),
            ],
        ),
        migrations.CreateModel(
            name='DoctorMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consultant_doctor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.consultant')),
            ],
        ),
        migrations.CreateModel(
            name='Deposit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mode', models.CharField(blank=True, choices=[('Deposit', 'Deposit'), ('Return', 'Return')], max_length=10, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('patientId', models.IntegerField(blank=True, null=True)),
                ('depositAmount', models.IntegerField(blank=True, null=True)),
                ('ac_ledger', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ac_ledger', to='api.accountledger')),
                ('rec_ledger', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.accountledger')),
            ],
        ),
        migrations.CreateModel(
            name='DefaultBillingLedger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patientType', models.CharField(blank=True, choices=[('Select Patient Type', 'Select Patient Type'), ('GENERAL', 'GENERAL'), ('LAND DONAR', 'LAND DONAR'), ('ANC', 'ANC'), ('DH KUSMS STUDENT', 'DH KUSMS STUDENT'), ('GOVERNMENT INSURANCE', 'GOVERNMENT INSURANCE'), ('EYE CAMP', 'EYE CAMP'), ('SCHEER MEMORIAL HOSPITAL', 'SCHEER MEMORIAL HOSPITAL'), ('NEW BORN', 'NEW BORN'), ('Bahunepati H.C', 'Bahunepati H.C'), ('DH STAFF', 'DH STAFF'), ('BALUWA H.C', 'BALUWA H.C'), ('KU-STAFF', 'KU-STAFF'), ('DH-FAMILY', 'DH-FAMILY'), ('KUHS-STAFF', 'KUHS-STAFF'), ('KAVRE BUS PVT. LTD', 'KAVRE BUS PVT. LTD'), ('MATRON DISCOUNT', 'MATRON DISCOUNT'), ('GOVT. FREE TREATMENT-DHO', 'GOVT. FREE TREATMENT-DHO'), ('SURGICAL CAMP', 'SURGICAL CAMP'), ('SPONSOR PATIENT', 'SPONSOR PATIENT'), ('CAMP EXPENSES', 'CAMP EXPENSES'), ('RAN AWAY', 'RAN AWAY'), ('DHULIKHEL DRINKING WATER COMMUNITY', 'DHULIKHEL DRINKING WATER COMMUNITY'), ('Surgical Ward', 'Surgical Ward'), ('Medical Ward', 'Medical Ward'), ('SENIOR CITIZEN', 'SENIOR CITIZEN'), ('DH-FRIEND', 'DH-FRIEND'), ('OCMC(ONE-STOP CRISIS MANAGEMENT CENTER)', 'OCMC(ONE-STOP CRISIS MANAGEMENT CENTER)'), ('VANDOL', 'VANDOL'), ('CARDIAC CAMP', 'CARDIAC CAMP'), ('GNC', 'GNC'), ('PG EXAM', 'PG EXAM'), ('SUBIDHA CARD', 'SUBIDHA CARD'), ('ECDC', 'ECDC'), ('KU-STAFF FAMILY', 'KU-STAFF FAMILY'), ('KU-STUDENT', 'KU-STUDENT'), ('KUHS-STAFF FAMILY', 'KUHS-STAFF FAMILY'), ('KUHS-STUDENT', 'KUHS-STUDENT'), ('SEAP', 'SEAP'), ('BIPANNA NAGARIK', 'BIPANNA NAGARIK'), ('EXECUTIVE BOARD MEMBER / FAMILY', 'EXECUTIVE BOARD MEMBER / FAMILY'), ('SIKHAR INSURANCE', 'SIKHAR INSURANCE'), ('FOOD POISON KAVRE', 'FOOD POISON KAVRE'), ('ACADEMIC PURPOSE', 'ACADEMIC PURPOSE'), ('BOARD MEMBER (FAMILY)', 'BOARD MEMBER (FAMILY)'), ('SECOND OT', 'SECOND OT'), ('SINDHU HELAMBU YATAYAT SEWA P.LTD', 'SINDHU HELAMBU YATAYAT SEWA P.LTD'), ('GANESH HIMAL YATAYAT SEWA CO.PVT LTD', 'GANESH HIMAL YATAYAT SEWA CO.PVT LTD'), ('IVI-T003', 'IVI-T003'), ('NAMASTE STIFTUNG', 'NAMASTE STIFTUNG'), ('JYOTI BUDATHOKI', 'JYOTI BUDATHOKI'), ('CHIEF MINISTRY HEALTH PROGRAM', 'CHIEF MINISTRY HEALTH PROGRAM'), ('KATHMANDU UNIVERSITY', 'KATHMANDU UNIVERSITY'), ('IMMUNIZATION RESPONSE (DHO)', 'IMMUNIZATION RESPONSE (DHO)'), ('BHOMI HOSPITAL', 'BHOMI HOSPITAL'), ('PURBA ARANIKO YATAYAT PVT.LTD', 'PURBA ARANIKO YATAYAT PVT.LTD'), ('METABOLIC SYNDROME', 'METABOLIC SYNDROME'), ('RED PAGODA', 'RED PAGODA'), ('JANTRA', 'JANTRA'), ('MATRON DISCOUNT(IPD)', 'MATRON DISCOUNT(IPD)'), ('VANDOL(IPD)', 'VANDOL(IPD)'), ('MI KUSMS STUDENT', 'MI KUSMS STUDENT'), ('BOLDE PHEDICHE HEALTH CEN', 'BOLDE PHEDICHE HEALTH CEN'), ('KATTIKE DEURALI H.C', 'KATTIKE DEURALI H.C'), ('DOLAKHA HOSPITAL', 'DOLAKHA HOSPITAL'), ('ENT WARD', 'ENT WARD'), ('ENT WARD NEW', 'ENT WARD NEW'), ('PSYCHIATRIC WARD', 'PSYCHIATRIC WARD'), ('PNC WARD', 'PNC WARD'), ('REWARD', 'REWARD'), ('ORTHOPEDIC WARD', 'ORTHOPEDIC WARD'), ('CARDIO PULMONARY OPD', 'CARDIO PULMONARY OPD'), ('CORESMA PROJECT', 'CORESMA PROJECT'), ('MANEKHARKA H.C', 'MANEKHARKA H.C'), ('WARD', 'WARD'), ('BALARA H.C', 'BALARA H.C'), ('CHHATRA DEURALI H.C', 'CHHATRA DEURALI H.C'), ('DHUNGKHARKA H.C', 'DHUNGKHARKA H.C'), ('DORPU H.C', 'DORPU H.C'), ('DUMJA H.C', 'DUMJA H.C'), ('KIRNETAR H.C', 'KIRNETAR H.C'), ('MANIKHARKA H.C', 'MANIKHARKA H.C'), ('DERMATOLOGY WARD', 'DERMATOLOGY WARD'), ('DENTAL WARD', 'DENTAL WARD'), ('EMERGENCY ROOM', 'EMERGENCY ROOM'), ('ENDOSCOPY', 'ENDOSCOPY'), ('ENT OPD', 'ENT OPD'), ('GYNE OPD', 'GYNE OPD'), ('HEMATOLOGY', 'HEMATOLOGY'), ('HEMO DIALYSIS', 'HEMO DIALYSIS'), ('HIGH DEPENDANCY UNIT', 'HIGH DEPENDANCY UNIT'), ('IMMUNIZATION F/P', 'IMMUNIZATION F/P'), ('LUNDRY', 'LUNDRY'), ('MEDICINE OPD', 'MEDICINE OPD'), ('MICROBIOLOGY', 'MICROBIOLOGY'), ('NEONATAL', 'NEONATAL'), ('OPD', 'OPD'), ('OPERATION THEATER', 'OPERATION THEATER'), ('ORTHO OPD / PR', 'ORTHO OPD / PR'), ('OT GYANE', 'OT GYANE'), ('PEDRATIC OPD', 'PEDRATIC OPD'), ('PHYSIOTHERAPY', 'PHYSIOTHERAPY'), ('RADIOLOGY', 'RADIOLOGY'), ('SEAP II', 'SEAP II'), ('SURGERY OPD', 'SURGERY OPD'), ('SYAHAR', 'SYAHAR'), ('WHCPP (WH-NP)', 'WHCPP (WH-NP)'), ('PROSTHO DENTAL', 'PROSTHO DENTAL'), ('PERIPDONTICS DENTAL', 'PERIPDONTICS DENTAL'), ('ORTHODONTICS DENTAL', 'ORTHODONTICS DENTAL'), ('GYANE LABOUR ROOM II', 'GYANE LABOUR ROOM II'), ('CANTEEN', 'CANTEEN'), ('DH RTA(2022-05-04)', 'DH RTA(2022-05-04)'), ('RTA BA 3 KHHA 2643', 'RTA BA 3 KHHA 2643'), ('RTA BA2 KHHA 5778', 'RTA BA2 KHHA 5778'), ('NAWAKANTIPUR BHALAI TATHA COMPANY PVT BALAJU', 'NAWAKANTIPUR BHALAI TATHA COMPANY PVT BALAJU'), ('DH RTA (JA-4009)', 'DH RTA (JA-4009)'), ('AARSHU KAFLE', 'AARSHU KAFLE'), ('BLOOD BANK', 'BLOOD BANK'), ('HRDC', 'HRDC'), ('SURGERY WARD', 'SURGERY WARD'), ('SOCIAL SECURTIY FUND', 'SOCIAL SECURTIY FUND'), ('STAFF', 'STAFF'), ('UN STAFF', 'UN STAFF'), ('DAPCHA H.C', 'DAPCHA H.C'), ('PHALEBAS H.C', 'PHALEBAS H.C'), ('POST OP WARD', 'POST OP WARD'), ('PEDODENTIC DENTAL', 'PEDODENTIC DENTAL'), ('MGDM', 'MGDM'), ('GYANE EMERGENCY', 'GYANE EMERGENCY'), ('OMR DENTAL', 'OMR DENTAL'), ('HINDI H.C', 'HINDI H.C'), ('SOLAMBU H.C', 'SOLAMBU H.C'), ('THANGSING H.C', 'THANGSING H.C'), ('PUTTAR HEALTH CENTER', 'PUTTAR HEALTH CENTER'), ('EYE WARD', 'EYE WARD'), ('OPD EYE', 'OPD EYE'), ('SURGERY DENTAL', 'SURGERY DENTAL'), ('PROCEDURE ROOM', 'PROCEDURE ROOM'), ('CT SCAN', 'CT SCAN'), ('SICU WARD', 'SICU WARD'), ('ICU PEDRATIC WARD', 'ICU PEDRATIC WARD'), ('CATH LAB', 'CATH LAB'), ('PEDIATRIC WARD', 'PEDIATRIC WARD'), ('CSSD', 'CSSD'), ('FORENSIC', 'FORENSIC'), ('MRI', 'MRI'), ('URO OPD', 'URO OPD'), ('INTENSIVE CARE UNIT', 'INTENSIVE CARE UNIT'), ('LABOR ROOM', 'LABOR ROOM'), ('LABORATORY', 'LABORATORY'), ('PEDIATRIC HDU', 'PEDIATRIC HDU'), ('ULTRASOUND DEPT', 'ULTRASOUND DEPT'), ('CONS & ENDO DENTAL', 'CONS & ENDO DENTAL')], max_length=50, null=True)),
                ('patientStatus', models.CharField(blank=True, choices=[('Registered', 'Registered'), ('Admitted', 'Admitted'), ('Outpatient', 'Outpatient'), ('Inpatient', 'Inpatient')], max_length=50, null=True)),
                ('isModeFixed', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('billingType', models.CharField(blank=True, choices=[('Cash', 'Cash'), ('Credit', 'Credit')], max_length=10, null=True)),
                ('isLedgerFixed', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('isActive', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('accountLedger', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.accountledger')),
                ('billingMode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.billingmode')),
            ],
        ),
        migrations.CreateModel(
            name='DebitCreditNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voucherNo', models.IntegerField(blank=True, null=True)),
                ('amount', models.IntegerField(blank=True, null=True)),
                ('debit_Credit', models.CharField(blank=True, choices=[('Dr.', 'Dr.'), ('Cr.', 'Cr.')], max_length=10, null=True)),
                ('debit_or_credit', models.CharField(blank=True, choices=[('Debit', 'Debit'), ('Credit', 'Credit')], max_length=10, null=True)),
                ('chequeNo', models.IntegerField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('reference', models.CharField(blank=True, choices=[('Against', 'Against')], max_length=20, null=True)),
                ('chequeDate', models.CharField(blank=True, choices=[('AD', 'AD')], max_length=20, null=True)),
                ('accountLedger', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.accountledger')),
            ],
        ),
        migrations.CreateModel(
            name='CustomForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fieldName', models.CharField(blank=True, max_length=50, null=True)),
                ('required', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10)),
                ('orderNo', models.IntegerField(blank=True, null=True)),
                ('menu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.menu')),
            ],
        ),
        migrations.CreateModel(
            name='ContraVoucher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voucherNo', models.IntegerField(blank=True, null=True)),
                ('amount', models.IntegerField(blank=True, null=True)),
                ('chequeNo', models.IntegerField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('chequeDate', models.DateField(blank=True, null=True)),
                ('bank_cash', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.accountledger')),
                ('paidTo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='api.accountledger')),
            ],
        ),
        migrations.AddField(
            model_name='consultant',
            name='consultant_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.consultanttype'),
        ),
        migrations.AddField(
            model_name='consultant',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.department'),
        ),
        migrations.CreateModel(
            name='ClaimPrefix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tpName', models.CharField(blank=True, choices=[('Choose TP Name', 'Choose TP Name'), ('HIB', 'HIB'), ('SSF', 'SSF'), ('Yatayat Prali', 'Yatayat Prali'), ('UN staff', 'UN staff'), ('Cash', 'Cash')], max_length=50, null=True)),
                ('prefix', models.CharField(blank=True, max_length=50, null=True)),
                ('suffix', models.CharField(blank=True, max_length=50, null=True)),
                ('startDate', models.DateField(blank=True, null=True)),
                ('endDate', models.DateField(blank=True, null=True)),
                ('startIndex', models.IntegerField(blank=True, null=True)),
                ('endIndex', models.IntegerField(blank=True, null=True)),
                ('fiscalYear', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.fiscalyear')),
            ],
        ),
        migrations.CreateModel(
            name='Charge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('patientId', models.IntegerField(null=True)),
                ('itemName', models.CharField(default='ex', max_length=200)),
                ('quantity', models.IntegerField(default=0)),
                ('price', models.IntegerField(default=0)),
                ('billId', models.IntegerField(blank=True, null=True)),
                ('totalCharge', models.BigIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.department')),
            ],
        ),
        migrations.CreateModel(
            name='Cash_CreditBilling',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patientId', models.IntegerField(blank=True, null=True)),
                ('patientType', models.CharField(blank=True, choices=[('Select Patient Type', 'Select Patient Type'), ('GENERAL', 'GENERAL'), ('LAND DONAR', 'LAND DONAR'), ('ANC', 'ANC'), ('DH KUSMS STUDENT', 'DH KUSMS STUDENT'), ('GOVERNMENT INSURANCE', 'GOVERNMENT INSURANCE'), ('EYE CAMP', 'EYE CAMP'), ('SCHEER MEMORIAL HOSPITAL', 'SCHEER MEMORIAL HOSPITAL'), ('NEW BORN', 'NEW BORN'), ('Bahunepati H.C', 'Bahunepati H.C'), ('DH STAFF', 'DH STAFF'), ('BALUWA H.C', 'BALUWA H.C'), ('KU-STAFF', 'KU-STAFF'), ('DH-FAMILY', 'DH-FAMILY'), ('KUHS-STAFF', 'KUHS-STAFF'), ('KAVRE BUS PVT. LTD', 'KAVRE BUS PVT. LTD'), ('MATRON DISCOUNT', 'MATRON DISCOUNT'), ('GOVT. FREE TREATMENT-DHO', 'GOVT. FREE TREATMENT-DHO'), ('SURGICAL CAMP', 'SURGICAL CAMP'), ('SPONSOR PATIENT', 'SPONSOR PATIENT'), ('CAMP EXPENSES', 'CAMP EXPENSES'), ('RAN AWAY', 'RAN AWAY'), ('DHULIKHEL DRINKING WATER COMMUNITY', 'DHULIKHEL DRINKING WATER COMMUNITY'), ('Surgical Ward', 'Surgical Ward'), ('Medical Ward', 'Medical Ward'), ('SENIOR CITIZEN', 'SENIOR CITIZEN'), ('DH-FRIEND', 'DH-FRIEND'), ('OCMC(ONE-STOP CRISIS MANAGEMENT CENTER)', 'OCMC(ONE-STOP CRISIS MANAGEMENT CENTER)'), ('VANDOL', 'VANDOL'), ('CARDIAC CAMP', 'CARDIAC CAMP'), ('GNC', 'GNC'), ('PG EXAM', 'PG EXAM'), ('SUBIDHA CARD', 'SUBIDHA CARD'), ('ECDC', 'ECDC'), ('KU-STAFF FAMILY', 'KU-STAFF FAMILY'), ('KU-STUDENT', 'KU-STUDENT'), ('KUHS-STAFF FAMILY', 'KUHS-STAFF FAMILY'), ('KUHS-STUDENT', 'KUHS-STUDENT'), ('SEAP', 'SEAP'), ('BIPANNA NAGARIK', 'BIPANNA NAGARIK'), ('EXECUTIVE BOARD MEMBER / FAMILY', 'EXECUTIVE BOARD MEMBER / FAMILY'), ('SIKHAR INSURANCE', 'SIKHAR INSURANCE'), ('FOOD POISON KAVRE', 'FOOD POISON KAVRE'), ('ACADEMIC PURPOSE', 'ACADEMIC PURPOSE'), ('BOARD MEMBER (FAMILY)', 'BOARD MEMBER (FAMILY)'), ('SECOND OT', 'SECOND OT'), ('SINDHU HELAMBU YATAYAT SEWA P.LTD', 'SINDHU HELAMBU YATAYAT SEWA P.LTD'), ('GANESH HIMAL YATAYAT SEWA CO.PVT LTD', 'GANESH HIMAL YATAYAT SEWA CO.PVT LTD'), ('IVI-T003', 'IVI-T003'), ('NAMASTE STIFTUNG', 'NAMASTE STIFTUNG'), ('JYOTI BUDATHOKI', 'JYOTI BUDATHOKI'), ('CHIEF MINISTRY HEALTH PROGRAM', 'CHIEF MINISTRY HEALTH PROGRAM'), ('KATHMANDU UNIVERSITY', 'KATHMANDU UNIVERSITY'), ('IMMUNIZATION RESPONSE (DHO)', 'IMMUNIZATION RESPONSE (DHO)'), ('BHOMI HOSPITAL', 'BHOMI HOSPITAL'), ('PURBA ARANIKO YATAYAT PVT.LTD', 'PURBA ARANIKO YATAYAT PVT.LTD'), ('METABOLIC SYNDROME', 'METABOLIC SYNDROME'), ('RED PAGODA', 'RED PAGODA'), ('JANTRA', 'JANTRA'), ('MATRON DISCOUNT(IPD)', 'MATRON DISCOUNT(IPD)'), ('VANDOL(IPD)', 'VANDOL(IPD)'), ('MI KUSMS STUDENT', 'MI KUSMS STUDENT'), ('BOLDE PHEDICHE HEALTH CEN', 'BOLDE PHEDICHE HEALTH CEN'), ('KATTIKE DEURALI H.C', 'KATTIKE DEURALI H.C'), ('DOLAKHA HOSPITAL', 'DOLAKHA HOSPITAL'), ('ENT WARD', 'ENT WARD'), ('ENT WARD NEW', 'ENT WARD NEW'), ('PSYCHIATRIC WARD', 'PSYCHIATRIC WARD'), ('PNC WARD', 'PNC WARD'), ('REWARD', 'REWARD'), ('ORTHOPEDIC WARD', 'ORTHOPEDIC WARD'), ('CARDIO PULMONARY OPD', 'CARDIO PULMONARY OPD'), ('CORESMA PROJECT', 'CORESMA PROJECT'), ('MANEKHARKA H.C', 'MANEKHARKA H.C'), ('WARD', 'WARD'), ('BALARA H.C', 'BALARA H.C'), ('CHHATRA DEURALI H.C', 'CHHATRA DEURALI H.C'), ('DHUNGKHARKA H.C', 'DHUNGKHARKA H.C'), ('DORPU H.C', 'DORPU H.C'), ('DUMJA H.C', 'DUMJA H.C'), ('KIRNETAR H.C', 'KIRNETAR H.C'), ('MANIKHARKA H.C', 'MANIKHARKA H.C'), ('DERMATOLOGY WARD', 'DERMATOLOGY WARD'), ('DENTAL WARD', 'DENTAL WARD'), ('EMERGENCY ROOM', 'EMERGENCY ROOM'), ('ENDOSCOPY', 'ENDOSCOPY'), ('ENT OPD', 'ENT OPD'), ('GYNE OPD', 'GYNE OPD'), ('HEMATOLOGY', 'HEMATOLOGY'), ('HEMO DIALYSIS', 'HEMO DIALYSIS'), ('HIGH DEPENDANCY UNIT', 'HIGH DEPENDANCY UNIT'), ('IMMUNIZATION F/P', 'IMMUNIZATION F/P'), ('LUNDRY', 'LUNDRY'), ('MEDICINE OPD', 'MEDICINE OPD'), ('MICROBIOLOGY', 'MICROBIOLOGY'), ('NEONATAL', 'NEONATAL'), ('OPD', 'OPD'), ('OPERATION THEATER', 'OPERATION THEATER'), ('ORTHO OPD / PR', 'ORTHO OPD / PR'), ('OT GYANE', 'OT GYANE'), ('PEDRATIC OPD', 'PEDRATIC OPD'), ('PHYSIOTHERAPY', 'PHYSIOTHERAPY'), ('RADIOLOGY', 'RADIOLOGY'), ('SEAP II', 'SEAP II'), ('SURGERY OPD', 'SURGERY OPD'), ('SYAHAR', 'SYAHAR'), ('WHCPP (WH-NP)', 'WHCPP (WH-NP)'), ('PROSTHO DENTAL', 'PROSTHO DENTAL'), ('PERIPDONTICS DENTAL', 'PERIPDONTICS DENTAL'), ('ORTHODONTICS DENTAL', 'ORTHODONTICS DENTAL'), ('GYANE LABOUR ROOM II', 'GYANE LABOUR ROOM II'), ('CANTEEN', 'CANTEEN'), ('DH RTA(2022-05-04)', 'DH RTA(2022-05-04)'), ('RTA BA 3 KHHA 2643', 'RTA BA 3 KHHA 2643'), ('RTA BA2 KHHA 5778', 'RTA BA2 KHHA 5778'), ('NAWAKANTIPUR BHALAI TATHA COMPANY PVT BALAJU', 'NAWAKANTIPUR BHALAI TATHA COMPANY PVT BALAJU'), ('DH RTA (JA-4009)', 'DH RTA (JA-4009)'), ('AARSHU KAFLE', 'AARSHU KAFLE'), ('BLOOD BANK', 'BLOOD BANK'), ('HRDC', 'HRDC'), ('SURGERY WARD', 'SURGERY WARD'), ('SOCIAL SECURTIY FUND', 'SOCIAL SECURTIY FUND'), ('STAFF', 'STAFF'), ('UN STAFF', 'UN STAFF'), ('DAPCHA H.C', 'DAPCHA H.C'), ('PHALEBAS H.C', 'PHALEBAS H.C'), ('POST OP WARD', 'POST OP WARD'), ('PEDODENTIC DENTAL', 'PEDODENTIC DENTAL'), ('MGDM', 'MGDM'), ('GYANE EMERGENCY', 'GYANE EMERGENCY'), ('OMR DENTAL', 'OMR DENTAL'), ('HINDI H.C', 'HINDI H.C'), ('SOLAMBU H.C', 'SOLAMBU H.C'), ('THANGSING H.C', 'THANGSING H.C'), ('PUTTAR HEALTH CENTER', 'PUTTAR HEALTH CENTER'), ('EYE WARD', 'EYE WARD'), ('OPD EYE', 'OPD EYE'), ('SURGERY DENTAL', 'SURGERY DENTAL'), ('PROCEDURE ROOM', 'PROCEDURE ROOM'), ('CT SCAN', 'CT SCAN'), ('SICU WARD', 'SICU WARD'), ('ICU PEDRATIC WARD', 'ICU PEDRATIC WARD'), ('CATH LAB', 'CATH LAB'), ('PEDIATRIC WARD', 'PEDIATRIC WARD'), ('CSSD', 'CSSD'), ('FORENSIC', 'FORENSIC'), ('MRI', 'MRI'), ('URO OPD', 'URO OPD'), ('INTENSIVE CARE UNIT', 'INTENSIVE CARE UNIT'), ('LABOR ROOM', 'LABOR ROOM'), ('LABORATORY', 'LABORATORY'), ('PEDIATRIC HDU', 'PEDIATRIC HDU'), ('ULTRASOUND DEPT', 'ULTRASOUND DEPT'), ('CONS & ENDO DENTAL', 'CONS & ENDO DENTAL')], max_length=50, null=True)),
                ('total', models.IntegerField(blank=True, null=True)),
                ('loadDraft', models.BooleanField(blank=True, null=True)),
                ('performedBy', models.ManyToManyField(to='api.consultant')),
            ],
        ),
        migrations.CreateModel(
            name='BudgetTitle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, choices=[('Select Ledger', 'Select Ledger'), ('Salary', 'Salary'), ('Discount Allowed', 'Discount Allowed'), ('Custom', 'Custom'), ('Purchase CC Charge', 'Purchase CC Charge'), ('Purchase Adjustment', 'Purchase Adjustment')], max_length=20, null=True)),
                ('amount', models.IntegerField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('cateory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.budgetcategory')),
                ('fiscalYear', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.fiscalyear')),
            ],
        ),
        migrations.CreateModel(
            name='BudgetIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True)),
                ('budgetType', models.CharField(blank=True, choices=[('Choose Issue Type', 'Choose Issue Type'), ('Monthly', 'Monthly'), ('One third', 'One third'), ('Quaterly', 'Quaterly'), ('Half Yearly', 'Half Yearly'), ('Yearly', 'Yearly')], max_length=20, null=True)),
                ('amount', models.IntegerField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('budgetCategory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.budgetcategory')),
                ('budgetTitle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.budgettitle')),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patientNo', models.IntegerField(blank=True, null=True)),
                ('bookedID', models.IntegerField(blank=True, null=True)),
                ('firstName', models.CharField(blank=True, max_length=50, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('wardNo', models.IntegerField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('relation', models.CharField(blank=True, choices=[('MOTHER', 'MOTHER'), ('HUSBAND', 'HUSBAND'), ('FATHER', 'FATHER'), ('WIFE', 'WIFE'), ('SON', 'SON'), ('DAUGHTER', 'DAUGHTER'), ('OTHER', 'OTHER'), ('C/O', 'C/O'), ('BROTHER', 'BROTHER'), ('SISTER', 'SISTER'), ('UNCLE', 'UNCLE'), ('CHILD', 'CHILD'), ('COUSIN', 'COUSIN'), ('DAUGHTER IN-LAW', 'DAUGHTER IN-LAW'), ('SISTER IN-LAW', 'SISTER IN-LAW'), ('FRIENDS', 'FRIENDS'), ('GRANDSON', 'GRANDSON'), ('GRANDDAUGHTER', 'GRANDDAUGHTER'), ('GRANDFATHER', 'GRANDFATHER'), ('GRANDMOTHER', 'GRANDMOTHER'), ('MOTHER IN-LAW', 'MOTHER IN-LAW'), ('BROTHER IN-LAW', 'BROTHER IN-LAW'), ('SON IN-LAW', 'SON IN-LAW'), ('FATHER IN-LAW', 'FATHER IN-LAW'), ('NIECE', 'NIECE'), ('NEPHEW', 'NEPHEW'), ('AUNTY', 'AUNTY')], max_length=20, null=True)),
                ('isFollowUp', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('consultDate', models.DateField(blank=True, null=True)),
                ('consultTime', models.TimeField(blank=True, null=True)),
                ('lastName', models.CharField(blank=True, max_length=50, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Others', 'Others')], max_length=20, null=True)),
                ('mobile', models.BigIntegerField(blank=True, null=True)),
                ('guardian', models.CharField(blank=True, max_length=50, null=True)),
                ('patientType', models.CharField(blank=True, choices=[('Select Patient Type', 'Select Patient Type'), ('GENERAL', 'GENERAL'), ('LAND DONAR', 'LAND DONAR'), ('ANC', 'ANC'), ('DH KUSMS STUDENT', 'DH KUSMS STUDENT'), ('GOVERNMENT INSURANCE', 'GOVERNMENT INSURANCE'), ('EYE CAMP', 'EYE CAMP'), ('SCHEER MEMORIAL HOSPITAL', 'SCHEER MEMORIAL HOSPITAL'), ('NEW BORN', 'NEW BORN'), ('Bahunepati H.C', 'Bahunepati H.C'), ('DH STAFF', 'DH STAFF'), ('BALUWA H.C', 'BALUWA H.C'), ('KU-STAFF', 'KU-STAFF'), ('DH-FAMILY', 'DH-FAMILY'), ('KUHS-STAFF', 'KUHS-STAFF'), ('KAVRE BUS PVT. LTD', 'KAVRE BUS PVT. LTD'), ('MATRON DISCOUNT', 'MATRON DISCOUNT'), ('GOVT. FREE TREATMENT-DHO', 'GOVT. FREE TREATMENT-DHO'), ('SURGICAL CAMP', 'SURGICAL CAMP'), ('SPONSOR PATIENT', 'SPONSOR PATIENT'), ('CAMP EXPENSES', 'CAMP EXPENSES'), ('RAN AWAY', 'RAN AWAY'), ('DHULIKHEL DRINKING WATER COMMUNITY', 'DHULIKHEL DRINKING WATER COMMUNITY'), ('Surgical Ward', 'Surgical Ward'), ('Medical Ward', 'Medical Ward'), ('SENIOR CITIZEN', 'SENIOR CITIZEN'), ('DH-FRIEND', 'DH-FRIEND'), ('OCMC(ONE-STOP CRISIS MANAGEMENT CENTER)', 'OCMC(ONE-STOP CRISIS MANAGEMENT CENTER)'), ('VANDOL', 'VANDOL'), ('CARDIAC CAMP', 'CARDIAC CAMP'), ('GNC', 'GNC'), ('PG EXAM', 'PG EXAM'), ('SUBIDHA CARD', 'SUBIDHA CARD'), ('ECDC', 'ECDC'), ('KU-STAFF FAMILY', 'KU-STAFF FAMILY'), ('KU-STUDENT', 'KU-STUDENT'), ('KUHS-STAFF FAMILY', 'KUHS-STAFF FAMILY'), ('KUHS-STUDENT', 'KUHS-STUDENT'), ('SEAP', 'SEAP'), ('BIPANNA NAGARIK', 'BIPANNA NAGARIK'), ('EXECUTIVE BOARD MEMBER / FAMILY', 'EXECUTIVE BOARD MEMBER / FAMILY'), ('SIKHAR INSURANCE', 'SIKHAR INSURANCE'), ('FOOD POISON KAVRE', 'FOOD POISON KAVRE'), ('ACADEMIC PURPOSE', 'ACADEMIC PURPOSE'), ('BOARD MEMBER (FAMILY)', 'BOARD MEMBER (FAMILY)'), ('SECOND OT', 'SECOND OT'), ('SINDHU HELAMBU YATAYAT SEWA P.LTD', 'SINDHU HELAMBU YATAYAT SEWA P.LTD'), ('GANESH HIMAL YATAYAT SEWA CO.PVT LTD', 'GANESH HIMAL YATAYAT SEWA CO.PVT LTD'), ('IVI-T003', 'IVI-T003'), ('NAMASTE STIFTUNG', 'NAMASTE STIFTUNG'), ('JYOTI BUDATHOKI', 'JYOTI BUDATHOKI'), ('CHIEF MINISTRY HEALTH PROGRAM', 'CHIEF MINISTRY HEALTH PROGRAM'), ('KATHMANDU UNIVERSITY', 'KATHMANDU UNIVERSITY'), ('IMMUNIZATION RESPONSE (DHO)', 'IMMUNIZATION RESPONSE (DHO)'), ('BHOMI HOSPITAL', 'BHOMI HOSPITAL'), ('PURBA ARANIKO YATAYAT PVT.LTD', 'PURBA ARANIKO YATAYAT PVT.LTD'), ('METABOLIC SYNDROME', 'METABOLIC SYNDROME'), ('RED PAGODA', 'RED PAGODA'), ('JANTRA', 'JANTRA'), ('MATRON DISCOUNT(IPD)', 'MATRON DISCOUNT(IPD)'), ('VANDOL(IPD)', 'VANDOL(IPD)'), ('MI KUSMS STUDENT', 'MI KUSMS STUDENT'), ('BOLDE PHEDICHE HEALTH CEN', 'BOLDE PHEDICHE HEALTH CEN'), ('KATTIKE DEURALI H.C', 'KATTIKE DEURALI H.C'), ('DOLAKHA HOSPITAL', 'DOLAKHA HOSPITAL'), ('ENT WARD', 'ENT WARD'), ('ENT WARD NEW', 'ENT WARD NEW'), ('PSYCHIATRIC WARD', 'PSYCHIATRIC WARD'), ('PNC WARD', 'PNC WARD'), ('REWARD', 'REWARD'), ('ORTHOPEDIC WARD', 'ORTHOPEDIC WARD'), ('CARDIO PULMONARY OPD', 'CARDIO PULMONARY OPD'), ('CORESMA PROJECT', 'CORESMA PROJECT'), ('MANEKHARKA H.C', 'MANEKHARKA H.C'), ('WARD', 'WARD'), ('BALARA H.C', 'BALARA H.C'), ('CHHATRA DEURALI H.C', 'CHHATRA DEURALI H.C'), ('DHUNGKHARKA H.C', 'DHUNGKHARKA H.C'), ('DORPU H.C', 'DORPU H.C'), ('DUMJA H.C', 'DUMJA H.C'), ('KIRNETAR H.C', 'KIRNETAR H.C'), ('MANIKHARKA H.C', 'MANIKHARKA H.C'), ('DERMATOLOGY WARD', 'DERMATOLOGY WARD'), ('DENTAL WARD', 'DENTAL WARD'), ('EMERGENCY ROOM', 'EMERGENCY ROOM'), ('ENDOSCOPY', 'ENDOSCOPY'), ('ENT OPD', 'ENT OPD'), ('GYNE OPD', 'GYNE OPD'), ('HEMATOLOGY', 'HEMATOLOGY'), ('HEMO DIALYSIS', 'HEMO DIALYSIS'), ('HIGH DEPENDANCY UNIT', 'HIGH DEPENDANCY UNIT'), ('IMMUNIZATION F/P', 'IMMUNIZATION F/P'), ('LUNDRY', 'LUNDRY'), ('MEDICINE OPD', 'MEDICINE OPD'), ('MICROBIOLOGY', 'MICROBIOLOGY'), ('NEONATAL', 'NEONATAL'), ('OPD', 'OPD'), ('OPERATION THEATER', 'OPERATION THEATER'), ('ORTHO OPD / PR', 'ORTHO OPD / PR'), ('OT GYANE', 'OT GYANE'), ('PEDRATIC OPD', 'PEDRATIC OPD'), ('PHYSIOTHERAPY', 'PHYSIOTHERAPY'), ('RADIOLOGY', 'RADIOLOGY'), ('SEAP II', 'SEAP II'), ('SURGERY OPD', 'SURGERY OPD'), ('SYAHAR', 'SYAHAR'), ('WHCPP (WH-NP)', 'WHCPP (WH-NP)'), ('PROSTHO DENTAL', 'PROSTHO DENTAL'), ('PERIPDONTICS DENTAL', 'PERIPDONTICS DENTAL'), ('ORTHODONTICS DENTAL', 'ORTHODONTICS DENTAL'), ('GYANE LABOUR ROOM II', 'GYANE LABOUR ROOM II'), ('CANTEEN', 'CANTEEN'), ('DH RTA(2022-05-04)', 'DH RTA(2022-05-04)'), ('RTA BA 3 KHHA 2643', 'RTA BA 3 KHHA 2643'), ('RTA BA2 KHHA 5778', 'RTA BA2 KHHA 5778'), ('NAWAKANTIPUR BHALAI TATHA COMPANY PVT BALAJU', 'NAWAKANTIPUR BHALAI TATHA COMPANY PVT BALAJU'), ('DH RTA (JA-4009)', 'DH RTA (JA-4009)'), ('AARSHU KAFLE', 'AARSHU KAFLE'), ('BLOOD BANK', 'BLOOD BANK'), ('HRDC', 'HRDC'), ('SURGERY WARD', 'SURGERY WARD'), ('SOCIAL SECURTIY FUND', 'SOCIAL SECURTIY FUND'), ('STAFF', 'STAFF'), ('UN STAFF', 'UN STAFF'), ('DAPCHA H.C', 'DAPCHA H.C'), ('PHALEBAS H.C', 'PHALEBAS H.C'), ('POST OP WARD', 'POST OP WARD'), ('PEDODENTIC DENTAL', 'PEDODENTIC DENTAL'), ('MGDM', 'MGDM'), ('GYANE EMERGENCY', 'GYANE EMERGENCY'), ('OMR DENTAL', 'OMR DENTAL'), ('HINDI H.C', 'HINDI H.C'), ('SOLAMBU H.C', 'SOLAMBU H.C'), ('THANGSING H.C', 'THANGSING H.C'), ('PUTTAR HEALTH CENTER', 'PUTTAR HEALTH CENTER'), ('EYE WARD', 'EYE WARD'), ('OPD EYE', 'OPD EYE'), ('SURGERY DENTAL', 'SURGERY DENTAL'), ('PROCEDURE ROOM', 'PROCEDURE ROOM'), ('CT SCAN', 'CT SCAN'), ('SICU WARD', 'SICU WARD'), ('ICU PEDRATIC WARD', 'ICU PEDRATIC WARD'), ('CATH LAB', 'CATH LAB'), ('PEDIATRIC WARD', 'PEDIATRIC WARD'), ('CSSD', 'CSSD'), ('FORENSIC', 'FORENSIC'), ('MRI', 'MRI'), ('URO OPD', 'URO OPD'), ('INTENSIVE CARE UNIT', 'INTENSIVE CARE UNIT'), ('LABOR ROOM', 'LABOR ROOM'), ('LABORATORY', 'LABORATORY'), ('PEDIATRIC HDU', 'PEDIATRIC HDU'), ('ULTRASOUND DEPT', 'ULTRASOUND DEPT'), ('CONS & ENDO DENTAL', 'CONS & ENDO DENTAL')], max_length=50, null=True)),
                ('panNo', models.IntegerField(blank=True, null=True)),
                ('billingMode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.billingmode')),
                ('consultant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.consultant')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.department')),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.district')),
                ('municipality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.municipality')),
                ('referBy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.referby')),
                ('referCorpo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.refercorporation')),
            ],
        ),
        migrations.CreateModel(
            name='BillingFraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('billNo', models.IntegerField(blank=True, null=True)),
                ('inType', models.CharField(blank=True, choices=[('Percentage', 'Percentage'), ('Amount', 'Amount')], max_length=50, null=True)),
                ('tax', models.IntegerField(blank=True, null=True)),
                ('itemId', models.IntegerField(blank=True, null=True)),
                ('inValue', models.IntegerField(blank=True, null=True)),
                ('outType', models.CharField(blank=True, choices=[('Percentage', 'Percentage'), ('Amount', 'Amount')], max_length=10, null=True)),
                ('outValue', models.IntegerField(blank=True, null=True)),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='doctor', to='api.consultant')),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.consultant')),
            ],
        ),
        migrations.CreateModel(
            name='Bill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('totalDiscount', models.IntegerField(blank=True, default=0, null=True)),
                ('nationalInsurance', models.IntegerField(blank=True, default=0, null=True)),
                ('hmo_com', models.IntegerField(blank=True, default=0, null=True)),
                ('totalPayAmount', models.IntegerField(default=0, null=True)),
                ('totalCharge', models.BigIntegerField(default=0, null=True)),
                ('totalPayment', models.IntegerField(default=0, null=True)),
                ('grandTotal', models.BigIntegerField(default=0, null=True)),
                ('status', models.CharField(choices=[('Paid', 'Paid'), ('Unpaid', 'Unpaid')], max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.patient')),
                ('visit', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.patientvisit')),
            ],
        ),
        migrations.AddField(
            model_name='bed',
            name='ward',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.ward'),
        ),
        migrations.CreateModel(
            name='AutoBillingSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('startDate', models.DateField(blank=True, null=True)),
                ('startTime', models.TimeField(blank=True, null=True)),
                ('isFollowUp', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('qty', models.IntegerField(blank=True, null=True)),
                ('endDate', models.DateField(blank=True, null=True)),
                ('endTime', models.TimeField(blank=True, null=True)),
                ('billingMode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.billingmode')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.department')),
                ('refOPDcost', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='refOpdCost', to='api.servicecost')),
                ('serviceCost', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='autoBillServiceCost', to='api.servicecost')),
            ],
        ),
        migrations.AddField(
            model_name='accountledger',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.accountledgergroup'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='MedPurchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchasedQuantity', models.IntegerField(null=True)),
                ('availableQuantity', models.IntegerField(null=True)),
                ('isActive', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=50, null=True)),
                ('medicine', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.medicine')),
            ],
        ),
        migrations.CreateModel(
            name='ExtraItem',
            fields=[
                ('brandName', models.CharField(blank=True, default='N/A', max_length=50, null=True)),
                ('size', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.size')),
                ('maxStock', models.IntegerField(blank=True, null=True)),
                ('extraItemType', models.CharField(blank=True, choices=[('Consumable', 'Consumable'), ('Non-Consumable', 'Non-Consumable')], max_length=20, null=True)),
                ('minStock', models.IntegerField(blank=True, null=True)),
                ('tax', models.CharField(blank=True, choices=[('N/A', 'N/A'), ('HST', 'HST'), ('VAT', 'VAT')], max_length=20, null=True)),
                ('active', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('groupName', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.group')),
                ('manufacturer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.manufacturer')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.unit')),
            ],
        ),
        migrations.CreateModel(
            name='SurgicalItem',
            fields=[
                ('brandName', models.CharField(blank=True, max_length=50, null=True)),
                ('primaryUnit', models.IntegerField(blank=True, null=True)),
                ('secondaryUnit', models.IntegerField(blank=True, null=True)),
                ('tax', models.CharField(blank=True, choices=[('N/A', 'N/A'), ('HST', 'HST'), ('VAT', 'VAT')], max_length=20, null=True)),
                ('active', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('surgicalName', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.surgical')),
                ('surgical_item_type', models.CharField(blank=True, choices=[('Consumable', 'Consumable'), ('Non-Consumable', 'Non-Consumable')], max_length=20, null=True)),
                ('min_stock', models.IntegerField(blank=True, null=True)),
                ('max_stock', models.IntegerField(blank=True, null=True)),
                ('manufacturer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.manufacturer')),
                ('packSize', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.packsize')),
                ('standard', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.standard')),
                ('unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.unit')),
            ],
        ),
    ]
